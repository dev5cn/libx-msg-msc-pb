// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net-x-msg-msc.proto

#include "net-x-msg-msc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_net_2dx_2dmsg_2dmsc_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus_net_2dx_2dmsg_2dmsc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_net_2dx_2dmsg_2dmsc_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse_net_2dx_2dmsg_2dmsc_2eproto;
class XmsgMscSubNeGroupStatusReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgMscSubNeGroupStatusReq> _instance;
} _XmsgMscSubNeGroupStatusReq_default_instance_;
class XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus> _instance;
} _XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus_default_instance_;
class XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse> _instance;
} _XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse_default_instance_;
class XmsgMscSubNeGroupStatusRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgMscSubNeGroupStatusRsp> _instance;
} _XmsgMscSubNeGroupStatusRsp_default_instance_;
class XmsgMscPubNeGroupStatusNoticeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgMscPubNeGroupStatusNotice> _instance;
} _XmsgMscPubNeGroupStatusNotice_default_instance_;
static void InitDefaultsXmsgMscSubNeGroupStatusReq_net_2dx_2dmsg_2dmsc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_XmsgMscSubNeGroupStatusReq_default_instance_;
    new (ptr) ::XmsgMscSubNeGroupStatusReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgMscSubNeGroupStatusReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_XmsgMscSubNeGroupStatusReq_net_2dx_2dmsg_2dmsc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsXmsgMscSubNeGroupStatusReq_net_2dx_2dmsg_2dmsc_2eproto}, {}};

static void InitDefaultsXmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus_net_2dx_2dmsg_2dmsc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus_default_instance_;
    new (ptr) ::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus_net_2dx_2dmsg_2dmsc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsXmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus_net_2dx_2dmsg_2dmsc_2eproto}, {}};

static void InitDefaultsXmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse_net_2dx_2dmsg_2dmsc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse_default_instance_;
    new (ptr) ::XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse();
  }
  ::XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse_net_2dx_2dmsg_2dmsc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsXmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse_net_2dx_2dmsg_2dmsc_2eproto}, {
      &scc_info_XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus_net_2dx_2dmsg_2dmsc_2eproto.base,}};

static void InitDefaultsXmsgMscSubNeGroupStatusRsp_net_2dx_2dmsg_2dmsc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_XmsgMscSubNeGroupStatusRsp_default_instance_;
    new (ptr) ::XmsgMscSubNeGroupStatusRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgMscSubNeGroupStatusRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_XmsgMscSubNeGroupStatusRsp_net_2dx_2dmsg_2dmsc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsXmsgMscSubNeGroupStatusRsp_net_2dx_2dmsg_2dmsc_2eproto}, {
      &scc_info_XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse_net_2dx_2dmsg_2dmsc_2eproto.base,}};

static void InitDefaultsXmsgMscPubNeGroupStatusNotice_net_2dx_2dmsg_2dmsc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_XmsgMscPubNeGroupStatusNotice_default_instance_;
    new (ptr) ::XmsgMscPubNeGroupStatusNotice();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgMscPubNeGroupStatusNotice::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_XmsgMscPubNeGroupStatusNotice_net_2dx_2dmsg_2dmsc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsXmsgMscPubNeGroupStatusNotice_net_2dx_2dmsg_2dmsc_2eproto}, {}};

void InitDefaults_net_2dx_2dmsg_2dmsc_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_XmsgMscSubNeGroupStatusReq_net_2dx_2dmsg_2dmsc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus_net_2dx_2dmsg_2dmsc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse_net_2dx_2dmsg_2dmsc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_XmsgMscSubNeGroupStatusRsp_net_2dx_2dmsg_2dmsc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_XmsgMscPubNeGroupStatusNotice_net_2dx_2dmsg_2dmsc_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_net_2dx_2dmsg_2dmsc_2eproto[5];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_net_2dx_2dmsg_2dmsc_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_net_2dx_2dmsg_2dmsc_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_net_2dx_2dmsg_2dmsc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XmsgMscSubNeGroupStatusReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::XmsgMscSubNeGroupStatusReq, neg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus, neg_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus, cgt_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus, attached_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus, uts_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XmsgMscSubNeGroupStatusRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::XmsgMscSubNeGroupStatusRsp, neg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XmsgMscPubNeGroupStatusNotice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::XmsgMscPubNeGroupStatusNotice, neg_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscPubNeGroupStatusNotice, cgt_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscPubNeGroupStatusNotice, attached_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscPubNeGroupStatusNotice, uts_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::XmsgMscSubNeGroupStatusReq)},
  { 6, -1, sizeof(::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus)},
  { 15, 22, sizeof(::XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse)},
  { 24, -1, sizeof(::XmsgMscSubNeGroupStatusRsp)},
  { 30, -1, sizeof(::XmsgMscPubNeGroupStatusNotice)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgMscSubNeGroupStatusReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgMscSubNeGroupStatusRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgMscPubNeGroupStatusNotice_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_net_2dx_2dmsg_2dmsc_2eproto = {
  {}, AddDescriptors_net_2dx_2dmsg_2dmsc_2eproto, "net-x-msg-msc.proto", schemas,
  file_default_instances, TableStruct_net_2dx_2dmsg_2dmsc_2eproto::offsets,
  file_level_metadata_net_2dx_2dmsg_2dmsc_2eproto, 5, file_level_enum_descriptors_net_2dx_2dmsg_2dmsc_2eproto, file_level_service_descriptors_net_2dx_2dmsg_2dmsc_2eproto,
};

const char descriptor_table_protodef_net_2dx_2dmsg_2dmsc_2eproto[] =
  "\n\023net-x-msg-msc.proto\")\n\032XmsgMscSubNeGro"
  "upStatusReq\022\013\n\003neg\030\001 \003(\t\"\364\001\n\032XmsgMscSubN"
  "eGroupStatusRsp\0221\n\003neg\030\001 \003(\0132$.XmsgMscSu"
  "bNeGroupStatusRsp.NegEntry\032J\n\017XmsgMscNeS"
  "tatus\022\013\n\003neg\030\001 \001(\t\022\013\n\003cgt\030\002 \001(\t\022\020\n\010attac"
  "hed\030\003 \001(\010\022\013\n\003uts\030\004 \001(\004\032W\n\010NegEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022:\n\005value\030\002 \001(\0132+.XmsgMscSubNeGro"
  "upStatusRsp.XmsgMscNeStatus:\0028\001\"X\n\035XmsgM"
  "scPubNeGroupStatusNotice\022\013\n\003neg\030\001 \001(\t\022\013\n"
  "\003cgt\030\002 \001(\t\022\020\n\010attached\030\003 \001(\010\022\013\n\003uts\030\004 \001("
  "\004B\025\n\010x.msg.pbB\tXmsgMscPbb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_net_2dx_2dmsg_2dmsc_2eproto = {
  false, InitDefaults_net_2dx_2dmsg_2dmsc_2eproto, 
  descriptor_table_protodef_net_2dx_2dmsg_2dmsc_2eproto,
  "net-x-msg-msc.proto", &assign_descriptors_table_net_2dx_2dmsg_2dmsc_2eproto, 432,
};

void AddDescriptors_net_2dx_2dmsg_2dmsc_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_net_2dx_2dmsg_2dmsc_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_net_2dx_2dmsg_2dmsc_2eproto = []() { AddDescriptors_net_2dx_2dmsg_2dmsc_2eproto(); return true; }();

// ===================================================================

void XmsgMscSubNeGroupStatusReq::InitAsDefaultInstance() {
}
class XmsgMscSubNeGroupStatusReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgMscSubNeGroupStatusReq::kNegFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgMscSubNeGroupStatusReq::XmsgMscSubNeGroupStatusReq()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgMscSubNeGroupStatusReq)
}
XmsgMscSubNeGroupStatusReq::XmsgMscSubNeGroupStatusReq(const XmsgMscSubNeGroupStatusReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      neg_(from.neg_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:XmsgMscSubNeGroupStatusReq)
}

void XmsgMscSubNeGroupStatusReq::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_XmsgMscSubNeGroupStatusReq_net_2dx_2dmsg_2dmsc_2eproto.base);
}

XmsgMscSubNeGroupStatusReq::~XmsgMscSubNeGroupStatusReq() {
  // @@protoc_insertion_point(destructor:XmsgMscSubNeGroupStatusReq)
  SharedDtor();
}

void XmsgMscSubNeGroupStatusReq::SharedDtor() {
}

void XmsgMscSubNeGroupStatusReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XmsgMscSubNeGroupStatusReq& XmsgMscSubNeGroupStatusReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_XmsgMscSubNeGroupStatusReq_net_2dx_2dmsg_2dmsc_2eproto.base);
  return *internal_default_instance();
}


void XmsgMscSubNeGroupStatusReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgMscSubNeGroupStatusReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neg_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* XmsgMscSubNeGroupStatusReq::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<XmsgMscSubNeGroupStatusReq*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string neg = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("XmsgMscSubNeGroupStatusReq.neg");
          object = msg->add_neg();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool XmsgMscSubNeGroupStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgMscSubNeGroupStatusReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string neg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_neg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neg(this->neg_size() - 1).data(),
            static_cast<int>(this->neg(this->neg_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgMscSubNeGroupStatusReq.neg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgMscSubNeGroupStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgMscSubNeGroupStatusReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void XmsgMscSubNeGroupStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgMscSubNeGroupStatusReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string neg = 1;
  for (int i = 0, n = this->neg_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg(i).data(), static_cast<int>(this->neg(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscSubNeGroupStatusReq.neg");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->neg(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgMscSubNeGroupStatusReq)
}

::google::protobuf::uint8* XmsgMscSubNeGroupStatusReq::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XmsgMscSubNeGroupStatusReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string neg = 1;
  for (int i = 0, n = this->neg_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg(i).data(), static_cast<int>(this->neg(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscSubNeGroupStatusReq.neg");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->neg(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgMscSubNeGroupStatusReq)
  return target;
}

size_t XmsgMscSubNeGroupStatusReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgMscSubNeGroupStatusReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string neg = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->neg_size());
  for (int i = 0, n = this->neg_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->neg(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XmsgMscSubNeGroupStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgMscSubNeGroupStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgMscSubNeGroupStatusReq* source =
      ::google::protobuf::DynamicCastToGenerated<XmsgMscSubNeGroupStatusReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgMscSubNeGroupStatusReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgMscSubNeGroupStatusReq)
    MergeFrom(*source);
  }
}

void XmsgMscSubNeGroupStatusReq::MergeFrom(const XmsgMscSubNeGroupStatusReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgMscSubNeGroupStatusReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  neg_.MergeFrom(from.neg_);
}

void XmsgMscSubNeGroupStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgMscSubNeGroupStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgMscSubNeGroupStatusReq::CopyFrom(const XmsgMscSubNeGroupStatusReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgMscSubNeGroupStatusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgMscSubNeGroupStatusReq::IsInitialized() const {
  return true;
}

void XmsgMscSubNeGroupStatusReq::Swap(XmsgMscSubNeGroupStatusReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgMscSubNeGroupStatusReq::InternalSwap(XmsgMscSubNeGroupStatusReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  neg_.InternalSwap(CastToBase(&other->neg_));
}

::google::protobuf::Metadata XmsgMscSubNeGroupStatusReq::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_net_2dx_2dmsg_2dmsc_2eproto);
  return ::file_level_metadata_net_2dx_2dmsg_2dmsc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::InitAsDefaultInstance() {
}
class XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::kNegFieldNumber;
const int XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::kCgtFieldNumber;
const int XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::kAttachedFieldNumber;
const int XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::kUtsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus)
}
XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus(const XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.neg().size() > 0) {
    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cgt().size() > 0) {
    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  ::memcpy(&uts_, &from.uts_,
    static_cast<size_t>(reinterpret_cast<char*>(&attached_) -
    reinterpret_cast<char*>(&uts_)) + sizeof(attached_));
  // @@protoc_insertion_point(copy_constructor:XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus)
}

void XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus_net_2dx_2dmsg_2dmsc_2eproto.base);
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attached_) -
      reinterpret_cast<char*>(&uts_)) + sizeof(attached_));
}

XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::~XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus() {
  // @@protoc_insertion_point(destructor:XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus)
  SharedDtor();
}

void XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::SharedDtor() {
  neg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus& XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus_net_2dx_2dmsg_2dmsc_2eproto.base);
  return *internal_default_instance();
}


void XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attached_) -
      reinterpret_cast<char*>(&uts_)) + sizeof(attached_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string neg = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus.neg");
        object = msg->mutable_neg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string cgt = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus.cgt");
        object = msg->mutable_cgt();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool attached = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_attached(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 uts = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_uts(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string neg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neg().data(), static_cast<int>(this->neg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus.neg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cgt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cgt().data(), static_cast<int>(this->cgt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus.cgt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool attached = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 uts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus.neg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->neg(), output);
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus.cgt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cgt(), output);
  }

  // bool attached = 3;
  if (this->attached() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->attached(), output);
  }

  // uint64 uts = 4;
  if (this->uts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->uts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus)
}

::google::protobuf::uint8* XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus.neg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->neg(), target);
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus.cgt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cgt(), target);
  }

  // bool attached = 3;
  if (this->attached() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->attached(), target);
  }

  // uint64 uts = 4;
  if (this->uts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->uts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus)
  return target;
}

size_t XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->neg());
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cgt());
  }

  // uint64 uts = 4;
  if (this->uts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uts());
  }

  // bool attached = 3;
  if (this->attached() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus* source =
      ::google::protobuf::DynamicCastToGenerated<XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus)
    MergeFrom(*source);
  }
}

void XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::MergeFrom(const XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.neg().size() > 0) {

    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  if (from.cgt().size() > 0) {

    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.uts() != 0) {
    set_uts(from.uts());
  }
  if (from.attached() != 0) {
    set_attached(from.attached());
  }
}

void XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::CopyFrom(const XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::IsInitialized() const {
  return true;
}

void XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::Swap(XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::InternalSwap(XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  neg_.Swap(&other->neg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cgt_.Swap(&other->cgt_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uts_, other->uts_);
  swap(attached_, other->attached_);
}

::google::protobuf::Metadata XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_net_2dx_2dmsg_2dmsc_2eproto);
  return ::file_level_metadata_net_2dx_2dmsg_2dmsc_2eproto[kIndexInFileMessages];
}


// ===================================================================

XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse::XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse() {}
XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse::XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse::MergeFrom(const XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_net_2dx_2dmsg_2dmsc_2eproto);
  return ::file_level_metadata_net_2dx_2dmsg_2dmsc_2eproto[2];
}
void XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "XmsgMscSubNeGroupStatusRsp.NegEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void XmsgMscSubNeGroupStatusRsp::InitAsDefaultInstance() {
}
class XmsgMscSubNeGroupStatusRsp::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgMscSubNeGroupStatusRsp::kNegFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgMscSubNeGroupStatusRsp::XmsgMscSubNeGroupStatusRsp()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgMscSubNeGroupStatusRsp)
}
XmsgMscSubNeGroupStatusRsp::XmsgMscSubNeGroupStatusRsp(const XmsgMscSubNeGroupStatusRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  neg_.MergeFrom(from.neg_);
  // @@protoc_insertion_point(copy_constructor:XmsgMscSubNeGroupStatusRsp)
}

void XmsgMscSubNeGroupStatusRsp::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_XmsgMscSubNeGroupStatusRsp_net_2dx_2dmsg_2dmsc_2eproto.base);
}

XmsgMscSubNeGroupStatusRsp::~XmsgMscSubNeGroupStatusRsp() {
  // @@protoc_insertion_point(destructor:XmsgMscSubNeGroupStatusRsp)
  SharedDtor();
}

void XmsgMscSubNeGroupStatusRsp::SharedDtor() {
}

void XmsgMscSubNeGroupStatusRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XmsgMscSubNeGroupStatusRsp& XmsgMscSubNeGroupStatusRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_XmsgMscSubNeGroupStatusRsp_net_2dx_2dmsg_2dmsc_2eproto.base);
  return *internal_default_instance();
}


void XmsgMscSubNeGroupStatusRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgMscSubNeGroupStatusRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neg_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* XmsgMscSubNeGroupStatusRsp::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<XmsgMscSubNeGroupStatusRsp*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // map<string, .XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus> neg = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->neg_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool XmsgMscSubNeGroupStatusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgMscSubNeGroupStatusRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus> neg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse,
              ::std::string, ::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus > > parser(&neg_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgMscSubNeGroupStatusRsp.NegEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgMscSubNeGroupStatusRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgMscSubNeGroupStatusRsp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void XmsgMscSubNeGroupStatusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgMscSubNeGroupStatusRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus> neg = 1;
  if (!this->neg().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgMscSubNeGroupStatusRsp.NegEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->neg().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->neg().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus >::const_iterator
          it = this->neg().begin();
          it != this->neg().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(neg_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus >::const_iterator
          it = this->neg().begin();
          it != this->neg().end(); ++it) {
        entry.reset(neg_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgMscSubNeGroupStatusRsp)
}

::google::protobuf::uint8* XmsgMscSubNeGroupStatusRsp::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XmsgMscSubNeGroupStatusRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus> neg = 1;
  if (!this->neg().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgMscSubNeGroupStatusRsp.NegEntry.key");
      }
    };

    if (false &&
        this->neg().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->neg().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus >::const_iterator
          it = this->neg().begin();
          it != this->neg().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(neg_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus >::const_iterator
          it = this->neg().begin();
          it != this->neg().end(); ++it) {
        entry.reset(neg_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgMscSubNeGroupStatusRsp)
  return target;
}

size_t XmsgMscSubNeGroupStatusRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgMscSubNeGroupStatusRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .XmsgMscSubNeGroupStatusRsp.XmsgMscNeStatus> neg = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->neg_size());
  {
    ::std::unique_ptr<XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus >::const_iterator
        it = this->neg().begin();
        it != this->neg().end(); ++it) {
      entry.reset(neg_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XmsgMscSubNeGroupStatusRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgMscSubNeGroupStatusRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgMscSubNeGroupStatusRsp* source =
      ::google::protobuf::DynamicCastToGenerated<XmsgMscSubNeGroupStatusRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgMscSubNeGroupStatusRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgMscSubNeGroupStatusRsp)
    MergeFrom(*source);
  }
}

void XmsgMscSubNeGroupStatusRsp::MergeFrom(const XmsgMscSubNeGroupStatusRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgMscSubNeGroupStatusRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  neg_.MergeFrom(from.neg_);
}

void XmsgMscSubNeGroupStatusRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgMscSubNeGroupStatusRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgMscSubNeGroupStatusRsp::CopyFrom(const XmsgMscSubNeGroupStatusRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgMscSubNeGroupStatusRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgMscSubNeGroupStatusRsp::IsInitialized() const {
  return true;
}

void XmsgMscSubNeGroupStatusRsp::Swap(XmsgMscSubNeGroupStatusRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgMscSubNeGroupStatusRsp::InternalSwap(XmsgMscSubNeGroupStatusRsp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  neg_.Swap(&other->neg_);
}

::google::protobuf::Metadata XmsgMscSubNeGroupStatusRsp::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_net_2dx_2dmsg_2dmsc_2eproto);
  return ::file_level_metadata_net_2dx_2dmsg_2dmsc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void XmsgMscPubNeGroupStatusNotice::InitAsDefaultInstance() {
}
class XmsgMscPubNeGroupStatusNotice::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgMscPubNeGroupStatusNotice::kNegFieldNumber;
const int XmsgMscPubNeGroupStatusNotice::kCgtFieldNumber;
const int XmsgMscPubNeGroupStatusNotice::kAttachedFieldNumber;
const int XmsgMscPubNeGroupStatusNotice::kUtsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgMscPubNeGroupStatusNotice::XmsgMscPubNeGroupStatusNotice()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgMscPubNeGroupStatusNotice)
}
XmsgMscPubNeGroupStatusNotice::XmsgMscPubNeGroupStatusNotice(const XmsgMscPubNeGroupStatusNotice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.neg().size() > 0) {
    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cgt().size() > 0) {
    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  ::memcpy(&uts_, &from.uts_,
    static_cast<size_t>(reinterpret_cast<char*>(&attached_) -
    reinterpret_cast<char*>(&uts_)) + sizeof(attached_));
  // @@protoc_insertion_point(copy_constructor:XmsgMscPubNeGroupStatusNotice)
}

void XmsgMscPubNeGroupStatusNotice::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_XmsgMscPubNeGroupStatusNotice_net_2dx_2dmsg_2dmsc_2eproto.base);
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attached_) -
      reinterpret_cast<char*>(&uts_)) + sizeof(attached_));
}

XmsgMscPubNeGroupStatusNotice::~XmsgMscPubNeGroupStatusNotice() {
  // @@protoc_insertion_point(destructor:XmsgMscPubNeGroupStatusNotice)
  SharedDtor();
}

void XmsgMscPubNeGroupStatusNotice::SharedDtor() {
  neg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgMscPubNeGroupStatusNotice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XmsgMscPubNeGroupStatusNotice& XmsgMscPubNeGroupStatusNotice::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_XmsgMscPubNeGroupStatusNotice_net_2dx_2dmsg_2dmsc_2eproto.base);
  return *internal_default_instance();
}


void XmsgMscPubNeGroupStatusNotice::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgMscPubNeGroupStatusNotice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attached_) -
      reinterpret_cast<char*>(&uts_)) + sizeof(attached_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* XmsgMscPubNeGroupStatusNotice::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<XmsgMscPubNeGroupStatusNotice*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string neg = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("XmsgMscPubNeGroupStatusNotice.neg");
        object = msg->mutable_neg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string cgt = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("XmsgMscPubNeGroupStatusNotice.cgt");
        object = msg->mutable_cgt();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool attached = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_attached(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 uts = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_uts(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool XmsgMscPubNeGroupStatusNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgMscPubNeGroupStatusNotice)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string neg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neg().data(), static_cast<int>(this->neg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgMscPubNeGroupStatusNotice.neg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cgt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cgt().data(), static_cast<int>(this->cgt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgMscPubNeGroupStatusNotice.cgt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool attached = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 uts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgMscPubNeGroupStatusNotice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgMscPubNeGroupStatusNotice)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void XmsgMscPubNeGroupStatusNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgMscPubNeGroupStatusNotice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscPubNeGroupStatusNotice.neg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->neg(), output);
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscPubNeGroupStatusNotice.cgt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cgt(), output);
  }

  // bool attached = 3;
  if (this->attached() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->attached(), output);
  }

  // uint64 uts = 4;
  if (this->uts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->uts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgMscPubNeGroupStatusNotice)
}

::google::protobuf::uint8* XmsgMscPubNeGroupStatusNotice::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XmsgMscPubNeGroupStatusNotice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscPubNeGroupStatusNotice.neg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->neg(), target);
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscPubNeGroupStatusNotice.cgt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cgt(), target);
  }

  // bool attached = 3;
  if (this->attached() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->attached(), target);
  }

  // uint64 uts = 4;
  if (this->uts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->uts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgMscPubNeGroupStatusNotice)
  return target;
}

size_t XmsgMscPubNeGroupStatusNotice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgMscPubNeGroupStatusNotice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->neg());
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cgt());
  }

  // uint64 uts = 4;
  if (this->uts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uts());
  }

  // bool attached = 3;
  if (this->attached() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XmsgMscPubNeGroupStatusNotice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgMscPubNeGroupStatusNotice)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgMscPubNeGroupStatusNotice* source =
      ::google::protobuf::DynamicCastToGenerated<XmsgMscPubNeGroupStatusNotice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgMscPubNeGroupStatusNotice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgMscPubNeGroupStatusNotice)
    MergeFrom(*source);
  }
}

void XmsgMscPubNeGroupStatusNotice::MergeFrom(const XmsgMscPubNeGroupStatusNotice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgMscPubNeGroupStatusNotice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.neg().size() > 0) {

    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  if (from.cgt().size() > 0) {

    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.uts() != 0) {
    set_uts(from.uts());
  }
  if (from.attached() != 0) {
    set_attached(from.attached());
  }
}

void XmsgMscPubNeGroupStatusNotice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgMscPubNeGroupStatusNotice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgMscPubNeGroupStatusNotice::CopyFrom(const XmsgMscPubNeGroupStatusNotice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgMscPubNeGroupStatusNotice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgMscPubNeGroupStatusNotice::IsInitialized() const {
  return true;
}

void XmsgMscPubNeGroupStatusNotice::Swap(XmsgMscPubNeGroupStatusNotice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgMscPubNeGroupStatusNotice::InternalSwap(XmsgMscPubNeGroupStatusNotice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  neg_.Swap(&other->neg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cgt_.Swap(&other->cgt_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uts_, other->uts_);
  swap(attached_, other->attached_);
}

::google::protobuf::Metadata XmsgMscPubNeGroupStatusNotice::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_net_2dx_2dmsg_2dmsc_2eproto);
  return ::file_level_metadata_net_2dx_2dmsg_2dmsc_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::XmsgMscSubNeGroupStatusReq* Arena::CreateMaybeMessage< ::XmsgMscSubNeGroupStatusReq >(Arena* arena) {
  return Arena::CreateInternal< ::XmsgMscSubNeGroupStatusReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus* Arena::CreateMaybeMessage< ::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus >(Arena* arena) {
  return Arena::CreateInternal< ::XmsgMscSubNeGroupStatusRsp_XmsgMscNeStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse* Arena::CreateMaybeMessage< ::XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::XmsgMscSubNeGroupStatusRsp_NegEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::XmsgMscSubNeGroupStatusRsp* Arena::CreateMaybeMessage< ::XmsgMscSubNeGroupStatusRsp >(Arena* arena) {
  return Arena::CreateInternal< ::XmsgMscSubNeGroupStatusRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::XmsgMscPubNeGroupStatusNotice* Arena::CreateMaybeMessage< ::XmsgMscPubNeGroupStatusNotice >(Arena* arena) {
  return Arena::CreateInternal< ::XmsgMscPubNeGroupStatusNotice >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
