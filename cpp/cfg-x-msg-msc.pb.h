// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfg-x-msg-msc.proto

#ifndef PROTOBUF_INCLUDED_cfg_2dx_2dmsg_2dmsc_2eproto
#define PROTOBUF_INCLUDED_cfg_2dx_2dmsg_2dmsc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cfg_2dx_2dmsg_2dmsc_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_cfg_2dx_2dmsg_2dmsc_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_cfg_2dx_2dmsg_2dmsc_2eproto();
class XmsgMscCfgLog;
class XmsgMscCfgLogDefaultTypeInternal;
extern XmsgMscCfgLogDefaultTypeInternal _XmsgMscCfgLog_default_instance_;
class XmsgMscCfgMisc;
class XmsgMscCfgMiscDefaultTypeInternal;
extern XmsgMscCfgMiscDefaultTypeInternal _XmsgMscCfgMisc_default_instance_;
class XmsgMscCfgPb;
class XmsgMscCfgPbDefaultTypeInternal;
extern XmsgMscCfgPbDefaultTypeInternal _XmsgMscCfgPb_default_instance_;
class XmsgMscCfgPb_KafkaProdEntry_DoNotUse;
class XmsgMscCfgPb_KafkaProdEntry_DoNotUseDefaultTypeInternal;
extern XmsgMscCfgPb_KafkaProdEntry_DoNotUseDefaultTypeInternal _XmsgMscCfgPb_KafkaProdEntry_DoNotUse_default_instance_;
class XmsgMscCfgXmsgMsc;
class XmsgMscCfgXmsgMscDefaultTypeInternal;
extern XmsgMscCfgXmsgMscDefaultTypeInternal _XmsgMscCfgXmsgMsc_default_instance_;
class XmsgMscCfgXmsgNe;
class XmsgMscCfgXmsgNeDefaultTypeInternal;
extern XmsgMscCfgXmsgNeDefaultTypeInternal _XmsgMscCfgXmsgNe_default_instance_;
class XmsgMscCfgXscTcpServer;
class XmsgMscCfgXscTcpServerDefaultTypeInternal;
extern XmsgMscCfgXscTcpServerDefaultTypeInternal _XmsgMscCfgXscTcpServer_default_instance_;
namespace google {
namespace protobuf {
template<> ::XmsgMscCfgLog* Arena::CreateMaybeMessage<::XmsgMscCfgLog>(Arena*);
template<> ::XmsgMscCfgMisc* Arena::CreateMaybeMessage<::XmsgMscCfgMisc>(Arena*);
template<> ::XmsgMscCfgPb* Arena::CreateMaybeMessage<::XmsgMscCfgPb>(Arena*);
template<> ::XmsgMscCfgPb_KafkaProdEntry_DoNotUse* Arena::CreateMaybeMessage<::XmsgMscCfgPb_KafkaProdEntry_DoNotUse>(Arena*);
template<> ::XmsgMscCfgXmsgMsc* Arena::CreateMaybeMessage<::XmsgMscCfgXmsgMsc>(Arena*);
template<> ::XmsgMscCfgXmsgNe* Arena::CreateMaybeMessage<::XmsgMscCfgXmsgNe>(Arena*);
template<> ::XmsgMscCfgXscTcpServer* Arena::CreateMaybeMessage<::XmsgMscCfgXscTcpServer>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class XmsgMscCfgPb_KafkaProdEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<XmsgMscCfgPb_KafkaProdEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<XmsgMscCfgPb_KafkaProdEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  XmsgMscCfgPb_KafkaProdEntry_DoNotUse();
  XmsgMscCfgPb_KafkaProdEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const XmsgMscCfgPb_KafkaProdEntry_DoNotUse& other);
  static const XmsgMscCfgPb_KafkaProdEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const XmsgMscCfgPb_KafkaProdEntry_DoNotUse*>(&_XmsgMscCfgPb_KafkaProdEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class XmsgMscCfgPb :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgMscCfgPb) */ {
 public:
  XmsgMscCfgPb();
  virtual ~XmsgMscCfgPb();

  XmsgMscCfgPb(const XmsgMscCfgPb& from);

  inline XmsgMscCfgPb& operator=(const XmsgMscCfgPb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgMscCfgPb(XmsgMscCfgPb&& from) noexcept
    : XmsgMscCfgPb() {
    *this = ::std::move(from);
  }

  inline XmsgMscCfgPb& operator=(XmsgMscCfgPb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const XmsgMscCfgPb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgMscCfgPb* internal_default_instance() {
    return reinterpret_cast<const XmsgMscCfgPb*>(
               &_XmsgMscCfgPb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(XmsgMscCfgPb* other);
  friend void swap(XmsgMscCfgPb& a, XmsgMscCfgPb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgMscCfgPb* New() const final {
    return CreateMaybeMessage<XmsgMscCfgPb>(nullptr);
  }

  XmsgMscCfgPb* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XmsgMscCfgPb>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XmsgMscCfgPb& from);
  void MergeFrom(const XmsgMscCfgPb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XmsgMscCfgPb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .XmsgMscCfgXmsgMsc superior = 5;
  int superior_size() const;
  void clear_superior();
  static const int kSuperiorFieldNumber = 5;
  ::XmsgMscCfgXmsgMsc* mutable_superior(int index);
  ::google::protobuf::RepeatedPtrField< ::XmsgMscCfgXmsgMsc >*
      mutable_superior();
  const ::XmsgMscCfgXmsgMsc& superior(int index) const;
  ::XmsgMscCfgXmsgMsc* add_superior();
  const ::google::protobuf::RepeatedPtrField< ::XmsgMscCfgXmsgMsc >&
      superior() const;

  // repeated .XmsgMscCfgXmsgNe subordinate = 6;
  int subordinate_size() const;
  void clear_subordinate();
  static const int kSubordinateFieldNumber = 6;
  ::XmsgMscCfgXmsgNe* mutable_subordinate(int index);
  ::google::protobuf::RepeatedPtrField< ::XmsgMscCfgXmsgNe >*
      mutable_subordinate();
  const ::XmsgMscCfgXmsgNe& subordinate(int index) const;
  ::XmsgMscCfgXmsgNe* add_subordinate();
  const ::google::protobuf::RepeatedPtrField< ::XmsgMscCfgXmsgNe >&
      subordinate() const;

  // repeated .XmsgMscCfgXmsgNe n2h = 7;
  int n2h_size() const;
  void clear_n2h();
  static const int kN2HFieldNumber = 7;
  ::XmsgMscCfgXmsgNe* mutable_n2h(int index);
  ::google::protobuf::RepeatedPtrField< ::XmsgMscCfgXmsgNe >*
      mutable_n2h();
  const ::XmsgMscCfgXmsgNe& n2h(int index) const;
  ::XmsgMscCfgXmsgNe* add_n2h();
  const ::google::protobuf::RepeatedPtrField< ::XmsgMscCfgXmsgNe >&
      n2h() const;

  // map<string, string> kafkaProd = 9;
  int kafkaprod_size() const;
  void clear_kafkaprod();
  static const int kKafkaProdFieldNumber = 9;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      kafkaprod() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_kafkaprod();

  // string cgt = 1;
  void clear_cgt();
  static const int kCgtFieldNumber = 1;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // .XmsgMscCfgLog log = 2;
  bool has_log() const;
  void clear_log();
  static const int kLogFieldNumber = 2;
  const ::XmsgMscCfgLog& log() const;
  ::XmsgMscCfgLog* release_log();
  ::XmsgMscCfgLog* mutable_log();
  void set_allocated_log(::XmsgMscCfgLog* log);

  // .XmsgMscCfgXscTcpServer pub = 3;
  bool has_pub() const;
  void clear_pub();
  static const int kPubFieldNumber = 3;
  const ::XmsgMscCfgXscTcpServer& pub() const;
  ::XmsgMscCfgXscTcpServer* release_pub();
  ::XmsgMscCfgXscTcpServer* mutable_pub();
  void set_allocated_pub(::XmsgMscCfgXscTcpServer* pub);

  // .XmsgMscCfgXscTcpServer pri = 4;
  bool has_pri() const;
  void clear_pri();
  static const int kPriFieldNumber = 4;
  const ::XmsgMscCfgXscTcpServer& pri() const;
  ::XmsgMscCfgXscTcpServer* release_pri();
  ::XmsgMscCfgXscTcpServer* mutable_pri();
  void set_allocated_pri(::XmsgMscCfgXscTcpServer* pri);

  // .XmsgMscCfgMisc misc = 8;
  bool has_misc() const;
  void clear_misc();
  static const int kMiscFieldNumber = 8;
  const ::XmsgMscCfgMisc& misc() const;
  ::XmsgMscCfgMisc* release_misc();
  ::XmsgMscCfgMisc* mutable_misc();
  void set_allocated_misc(::XmsgMscCfgMisc* misc);

  // @@protoc_insertion_point(class_scope:XmsgMscCfgPb)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::XmsgMscCfgXmsgMsc > superior_;
  ::google::protobuf::RepeatedPtrField< ::XmsgMscCfgXmsgNe > subordinate_;
  ::google::protobuf::RepeatedPtrField< ::XmsgMscCfgXmsgNe > n2h_;
  ::google::protobuf::internal::MapField<
      XmsgMscCfgPb_KafkaProdEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > kafkaprod_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  ::XmsgMscCfgLog* log_;
  ::XmsgMscCfgXscTcpServer* pub_;
  ::XmsgMscCfgXscTcpServer* pri_;
  ::XmsgMscCfgMisc* misc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cfg_2dx_2dmsg_2dmsc_2eproto;
};
// -------------------------------------------------------------------

class XmsgMscCfgLog :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgMscCfgLog) */ {
 public:
  XmsgMscCfgLog();
  virtual ~XmsgMscCfgLog();

  XmsgMscCfgLog(const XmsgMscCfgLog& from);

  inline XmsgMscCfgLog& operator=(const XmsgMscCfgLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgMscCfgLog(XmsgMscCfgLog&& from) noexcept
    : XmsgMscCfgLog() {
    *this = ::std::move(from);
  }

  inline XmsgMscCfgLog& operator=(XmsgMscCfgLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const XmsgMscCfgLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgMscCfgLog* internal_default_instance() {
    return reinterpret_cast<const XmsgMscCfgLog*>(
               &_XmsgMscCfgLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(XmsgMscCfgLog* other);
  friend void swap(XmsgMscCfgLog& a, XmsgMscCfgLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgMscCfgLog* New() const final {
    return CreateMaybeMessage<XmsgMscCfgLog>(nullptr);
  }

  XmsgMscCfgLog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XmsgMscCfgLog>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XmsgMscCfgLog& from);
  void MergeFrom(const XmsgMscCfgLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XmsgMscCfgLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  const ::std::string& level() const;
  void set_level(const ::std::string& value);
  #if LANG_CXX11
  void set_level(::std::string&& value);
  #endif
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  ::std::string* mutable_level();
  ::std::string* release_level();
  void set_allocated_level(::std::string* level);

  // string output = 2;
  void clear_output();
  static const int kOutputFieldNumber = 2;
  const ::std::string& output() const;
  void set_output(const ::std::string& value);
  #if LANG_CXX11
  void set_output(::std::string&& value);
  #endif
  void set_output(const char* value);
  void set_output(const char* value, size_t size);
  ::std::string* mutable_output();
  ::std::string* release_output();
  void set_allocated_output(::std::string* output);

  // @@protoc_insertion_point(class_scope:XmsgMscCfgLog)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr level_;
  ::google::protobuf::internal::ArenaStringPtr output_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cfg_2dx_2dmsg_2dmsc_2eproto;
};
// -------------------------------------------------------------------

class XmsgMscCfgXscTcpServer :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgMscCfgXscTcpServer) */ {
 public:
  XmsgMscCfgXscTcpServer();
  virtual ~XmsgMscCfgXscTcpServer();

  XmsgMscCfgXscTcpServer(const XmsgMscCfgXscTcpServer& from);

  inline XmsgMscCfgXscTcpServer& operator=(const XmsgMscCfgXscTcpServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgMscCfgXscTcpServer(XmsgMscCfgXscTcpServer&& from) noexcept
    : XmsgMscCfgXscTcpServer() {
    *this = ::std::move(from);
  }

  inline XmsgMscCfgXscTcpServer& operator=(XmsgMscCfgXscTcpServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const XmsgMscCfgXscTcpServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgMscCfgXscTcpServer* internal_default_instance() {
    return reinterpret_cast<const XmsgMscCfgXscTcpServer*>(
               &_XmsgMscCfgXscTcpServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(XmsgMscCfgXscTcpServer* other);
  friend void swap(XmsgMscCfgXscTcpServer& a, XmsgMscCfgXscTcpServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgMscCfgXscTcpServer* New() const final {
    return CreateMaybeMessage<XmsgMscCfgXscTcpServer>(nullptr);
  }

  XmsgMscCfgXscTcpServer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XmsgMscCfgXscTcpServer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XmsgMscCfgXscTcpServer& from);
  void MergeFrom(const XmsgMscCfgXscTcpServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XmsgMscCfgXscTcpServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // uint32 worker = 2;
  void clear_worker();
  static const int kWorkerFieldNumber = 2;
  ::google::protobuf::uint32 worker() const;
  void set_worker(::google::protobuf::uint32 value);

  // uint32 peerLimit = 3;
  void clear_peerlimit();
  static const int kPeerLimitFieldNumber = 3;
  ::google::protobuf::uint32 peerlimit() const;
  void set_peerlimit(::google::protobuf::uint32 value);

  // uint32 peerMtu = 4;
  void clear_peermtu();
  static const int kPeerMtuFieldNumber = 4;
  ::google::protobuf::uint32 peermtu() const;
  void set_peermtu(::google::protobuf::uint32 value);

  // uint32 peerRcvBuf = 5;
  void clear_peerrcvbuf();
  static const int kPeerRcvBufFieldNumber = 5;
  ::google::protobuf::uint32 peerrcvbuf() const;
  void set_peerrcvbuf(::google::protobuf::uint32 value);

  // uint32 peerSndBuf = 6;
  void clear_peersndbuf();
  static const int kPeerSndBufFieldNumber = 6;
  ::google::protobuf::uint32 peersndbuf() const;
  void set_peersndbuf(::google::protobuf::uint32 value);

  // uint32 lazyClose = 7;
  void clear_lazyclose();
  static const int kLazyCloseFieldNumber = 7;
  ::google::protobuf::uint32 lazyclose() const;
  void set_lazyclose(::google::protobuf::uint32 value);

  // uint32 heartbeat = 9;
  void clear_heartbeat();
  static const int kHeartbeatFieldNumber = 9;
  ::google::protobuf::uint32 heartbeat() const;
  void set_heartbeat(::google::protobuf::uint32 value);

  // uint32 n2hZombie = 10;
  void clear_n2hzombie();
  static const int kN2HZombieFieldNumber = 10;
  ::google::protobuf::uint32 n2hzombie() const;
  void set_n2hzombie(::google::protobuf::uint32 value);

  // bool tracing = 8;
  void clear_tracing();
  static const int kTracingFieldNumber = 8;
  bool tracing() const;
  void set_tracing(bool value);

  // bool n2hTracing = 12;
  void clear_n2htracing();
  static const int kN2HTracingFieldNumber = 12;
  bool n2htracing() const;
  void set_n2htracing(bool value);

  // uint32 n2hTransTimeout = 11;
  void clear_n2htranstimeout();
  static const int kN2HTransTimeoutFieldNumber = 11;
  ::google::protobuf::uint32 n2htranstimeout() const;
  void set_n2htranstimeout(::google::protobuf::uint32 value);

  // uint32 h2nReConn = 13;
  void clear_h2nreconn();
  static const int kH2NReConnFieldNumber = 13;
  ::google::protobuf::uint32 h2nreconn() const;
  void set_h2nreconn(::google::protobuf::uint32 value);

  // uint32 h2nTransTimeout = 14;
  void clear_h2ntranstimeout();
  static const int kH2NTransTimeoutFieldNumber = 14;
  ::google::protobuf::uint32 h2ntranstimeout() const;
  void set_h2ntranstimeout(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgMscCfgXscTcpServer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::uint32 worker_;
  ::google::protobuf::uint32 peerlimit_;
  ::google::protobuf::uint32 peermtu_;
  ::google::protobuf::uint32 peerrcvbuf_;
  ::google::protobuf::uint32 peersndbuf_;
  ::google::protobuf::uint32 lazyclose_;
  ::google::protobuf::uint32 heartbeat_;
  ::google::protobuf::uint32 n2hzombie_;
  bool tracing_;
  bool n2htracing_;
  ::google::protobuf::uint32 n2htranstimeout_;
  ::google::protobuf::uint32 h2nreconn_;
  ::google::protobuf::uint32 h2ntranstimeout_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cfg_2dx_2dmsg_2dmsc_2eproto;
};
// -------------------------------------------------------------------

class XmsgMscCfgXmsgNe :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgMscCfgXmsgNe) */ {
 public:
  XmsgMscCfgXmsgNe();
  virtual ~XmsgMscCfgXmsgNe();

  XmsgMscCfgXmsgNe(const XmsgMscCfgXmsgNe& from);

  inline XmsgMscCfgXmsgNe& operator=(const XmsgMscCfgXmsgNe& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgMscCfgXmsgNe(XmsgMscCfgXmsgNe&& from) noexcept
    : XmsgMscCfgXmsgNe() {
    *this = ::std::move(from);
  }

  inline XmsgMscCfgXmsgNe& operator=(XmsgMscCfgXmsgNe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const XmsgMscCfgXmsgNe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgMscCfgXmsgNe* internal_default_instance() {
    return reinterpret_cast<const XmsgMscCfgXmsgNe*>(
               &_XmsgMscCfgXmsgNe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(XmsgMscCfgXmsgNe* other);
  friend void swap(XmsgMscCfgXmsgNe& a, XmsgMscCfgXmsgNe& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgMscCfgXmsgNe* New() const final {
    return CreateMaybeMessage<XmsgMscCfgXmsgNe>(nullptr);
  }

  XmsgMscCfgXmsgNe* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XmsgMscCfgXmsgNe>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XmsgMscCfgXmsgNe& from);
  void MergeFrom(const XmsgMscCfgXmsgNe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XmsgMscCfgXmsgNe* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string neg = 1;
  void clear_neg();
  static const int kNegFieldNumber = 1;
  const ::std::string& neg() const;
  void set_neg(const ::std::string& value);
  #if LANG_CXX11
  void set_neg(::std::string&& value);
  #endif
  void set_neg(const char* value);
  void set_neg(const char* value, size_t size);
  ::std::string* mutable_neg();
  ::std::string* release_neg();
  void set_allocated_neg(::std::string* neg);

  // string cgt = 2;
  void clear_cgt();
  static const int kCgtFieldNumber = 2;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // string pwd = 3;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // string addr = 4;
  void clear_addr();
  static const int kAddrFieldNumber = 4;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // @@protoc_insertion_point(class_scope:XmsgMscCfgXmsgNe)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr neg_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cfg_2dx_2dmsg_2dmsc_2eproto;
};
// -------------------------------------------------------------------

class XmsgMscCfgXmsgMsc :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgMscCfgXmsgMsc) */ {
 public:
  XmsgMscCfgXmsgMsc();
  virtual ~XmsgMscCfgXmsgMsc();

  XmsgMscCfgXmsgMsc(const XmsgMscCfgXmsgMsc& from);

  inline XmsgMscCfgXmsgMsc& operator=(const XmsgMscCfgXmsgMsc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgMscCfgXmsgMsc(XmsgMscCfgXmsgMsc&& from) noexcept
    : XmsgMscCfgXmsgMsc() {
    *this = ::std::move(from);
  }

  inline XmsgMscCfgXmsgMsc& operator=(XmsgMscCfgXmsgMsc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const XmsgMscCfgXmsgMsc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgMscCfgXmsgMsc* internal_default_instance() {
    return reinterpret_cast<const XmsgMscCfgXmsgMsc*>(
               &_XmsgMscCfgXmsgMsc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(XmsgMscCfgXmsgMsc* other);
  friend void swap(XmsgMscCfgXmsgMsc& a, XmsgMscCfgXmsgMsc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgMscCfgXmsgMsc* New() const final {
    return CreateMaybeMessage<XmsgMscCfgXmsgMsc>(nullptr);
  }

  XmsgMscCfgXmsgMsc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XmsgMscCfgXmsgMsc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XmsgMscCfgXmsgMsc& from);
  void MergeFrom(const XmsgMscCfgXmsgMsc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XmsgMscCfgXmsgMsc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cgt = 1;
  void clear_cgt();
  static const int kCgtFieldNumber = 1;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // string addr = 2;
  void clear_addr();
  static const int kAddrFieldNumber = 2;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // string pwd = 3;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // string alg = 4;
  void clear_alg();
  static const int kAlgFieldNumber = 4;
  const ::std::string& alg() const;
  void set_alg(const ::std::string& value);
  #if LANG_CXX11
  void set_alg(::std::string&& value);
  #endif
  void set_alg(const char* value);
  void set_alg(const char* value, size_t size);
  ::std::string* mutable_alg();
  ::std::string* release_alg();
  void set_allocated_alg(::std::string* alg);

  // @@protoc_insertion_point(class_scope:XmsgMscCfgXmsgMsc)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr alg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cfg_2dx_2dmsg_2dmsc_2eproto;
};
// -------------------------------------------------------------------

class XmsgMscCfgMisc :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgMscCfgMisc) */ {
 public:
  XmsgMscCfgMisc();
  virtual ~XmsgMscCfgMisc();

  XmsgMscCfgMisc(const XmsgMscCfgMisc& from);

  inline XmsgMscCfgMisc& operator=(const XmsgMscCfgMisc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgMscCfgMisc(XmsgMscCfgMisc&& from) noexcept
    : XmsgMscCfgMisc() {
    *this = ::std::move(from);
  }

  inline XmsgMscCfgMisc& operator=(XmsgMscCfgMisc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const XmsgMscCfgMisc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgMscCfgMisc* internal_default_instance() {
    return reinterpret_cast<const XmsgMscCfgMisc*>(
               &_XmsgMscCfgMisc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(XmsgMscCfgMisc* other);
  friend void swap(XmsgMscCfgMisc& a, XmsgMscCfgMisc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgMscCfgMisc* New() const final {
    return CreateMaybeMessage<XmsgMscCfgMisc>(nullptr);
  }

  XmsgMscCfgMisc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XmsgMscCfgMisc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XmsgMscCfgMisc& from);
  void MergeFrom(const XmsgMscCfgMisc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XmsgMscCfgMisc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 runMode = 1;
  void clear_runmode();
  static const int kRunModeFieldNumber = 1;
  ::google::protobuf::uint32 runmode() const;
  void set_runmode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgMscCfgMisc)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 runmode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cfg_2dx_2dmsg_2dmsc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// XmsgMscCfgPb

// string cgt = 1;
inline void XmsgMscCfgPb::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgMscCfgPb::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgPb.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgMscCfgPb::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgMscCfgPb.cgt)
}
#if LANG_CXX11
inline void XmsgMscCfgPb::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgMscCfgPb.cgt)
}
#endif
inline void XmsgMscCfgPb::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgMscCfgPb.cgt)
}
inline void XmsgMscCfgPb::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgMscCfgPb.cgt)
}
inline ::std::string* XmsgMscCfgPb::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgMscCfgPb.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgMscCfgPb::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgMscCfgPb.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgMscCfgPb::set_allocated_cgt(::std::string* cgt) {
  if (cgt != nullptr) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgMscCfgPb.cgt)
}

// .XmsgMscCfgLog log = 2;
inline bool XmsgMscCfgPb::has_log() const {
  return this != internal_default_instance() && log_ != nullptr;
}
inline void XmsgMscCfgPb::clear_log() {
  if (GetArenaNoVirtual() == nullptr && log_ != nullptr) {
    delete log_;
  }
  log_ = nullptr;
}
inline const ::XmsgMscCfgLog& XmsgMscCfgPb::log() const {
  const ::XmsgMscCfgLog* p = log_;
  // @@protoc_insertion_point(field_get:XmsgMscCfgPb.log)
  return p != nullptr ? *p : *reinterpret_cast<const ::XmsgMscCfgLog*>(
      &::_XmsgMscCfgLog_default_instance_);
}
inline ::XmsgMscCfgLog* XmsgMscCfgPb::release_log() {
  // @@protoc_insertion_point(field_release:XmsgMscCfgPb.log)
  
  ::XmsgMscCfgLog* temp = log_;
  log_ = nullptr;
  return temp;
}
inline ::XmsgMscCfgLog* XmsgMscCfgPb::mutable_log() {
  
  if (log_ == nullptr) {
    auto* p = CreateMaybeMessage<::XmsgMscCfgLog>(GetArenaNoVirtual());
    log_ = p;
  }
  // @@protoc_insertion_point(field_mutable:XmsgMscCfgPb.log)
  return log_;
}
inline void XmsgMscCfgPb::set_allocated_log(::XmsgMscCfgLog* log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete log_;
  }
  if (log) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    
  } else {
    
  }
  log_ = log;
  // @@protoc_insertion_point(field_set_allocated:XmsgMscCfgPb.log)
}

// .XmsgMscCfgXscTcpServer pub = 3;
inline bool XmsgMscCfgPb::has_pub() const {
  return this != internal_default_instance() && pub_ != nullptr;
}
inline void XmsgMscCfgPb::clear_pub() {
  if (GetArenaNoVirtual() == nullptr && pub_ != nullptr) {
    delete pub_;
  }
  pub_ = nullptr;
}
inline const ::XmsgMscCfgXscTcpServer& XmsgMscCfgPb::pub() const {
  const ::XmsgMscCfgXscTcpServer* p = pub_;
  // @@protoc_insertion_point(field_get:XmsgMscCfgPb.pub)
  return p != nullptr ? *p : *reinterpret_cast<const ::XmsgMscCfgXscTcpServer*>(
      &::_XmsgMscCfgXscTcpServer_default_instance_);
}
inline ::XmsgMscCfgXscTcpServer* XmsgMscCfgPb::release_pub() {
  // @@protoc_insertion_point(field_release:XmsgMscCfgPb.pub)
  
  ::XmsgMscCfgXscTcpServer* temp = pub_;
  pub_ = nullptr;
  return temp;
}
inline ::XmsgMscCfgXscTcpServer* XmsgMscCfgPb::mutable_pub() {
  
  if (pub_ == nullptr) {
    auto* p = CreateMaybeMessage<::XmsgMscCfgXscTcpServer>(GetArenaNoVirtual());
    pub_ = p;
  }
  // @@protoc_insertion_point(field_mutable:XmsgMscCfgPb.pub)
  return pub_;
}
inline void XmsgMscCfgPb::set_allocated_pub(::XmsgMscCfgXscTcpServer* pub) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pub_;
  }
  if (pub) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pub = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pub, submessage_arena);
    }
    
  } else {
    
  }
  pub_ = pub;
  // @@protoc_insertion_point(field_set_allocated:XmsgMscCfgPb.pub)
}

// .XmsgMscCfgXscTcpServer pri = 4;
inline bool XmsgMscCfgPb::has_pri() const {
  return this != internal_default_instance() && pri_ != nullptr;
}
inline void XmsgMscCfgPb::clear_pri() {
  if (GetArenaNoVirtual() == nullptr && pri_ != nullptr) {
    delete pri_;
  }
  pri_ = nullptr;
}
inline const ::XmsgMscCfgXscTcpServer& XmsgMscCfgPb::pri() const {
  const ::XmsgMscCfgXscTcpServer* p = pri_;
  // @@protoc_insertion_point(field_get:XmsgMscCfgPb.pri)
  return p != nullptr ? *p : *reinterpret_cast<const ::XmsgMscCfgXscTcpServer*>(
      &::_XmsgMscCfgXscTcpServer_default_instance_);
}
inline ::XmsgMscCfgXscTcpServer* XmsgMscCfgPb::release_pri() {
  // @@protoc_insertion_point(field_release:XmsgMscCfgPb.pri)
  
  ::XmsgMscCfgXscTcpServer* temp = pri_;
  pri_ = nullptr;
  return temp;
}
inline ::XmsgMscCfgXscTcpServer* XmsgMscCfgPb::mutable_pri() {
  
  if (pri_ == nullptr) {
    auto* p = CreateMaybeMessage<::XmsgMscCfgXscTcpServer>(GetArenaNoVirtual());
    pri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:XmsgMscCfgPb.pri)
  return pri_;
}
inline void XmsgMscCfgPb::set_allocated_pri(::XmsgMscCfgXscTcpServer* pri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pri_;
  }
  if (pri) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pri, submessage_arena);
    }
    
  } else {
    
  }
  pri_ = pri;
  // @@protoc_insertion_point(field_set_allocated:XmsgMscCfgPb.pri)
}

// repeated .XmsgMscCfgXmsgMsc superior = 5;
inline int XmsgMscCfgPb::superior_size() const {
  return superior_.size();
}
inline void XmsgMscCfgPb::clear_superior() {
  superior_.Clear();
}
inline ::XmsgMscCfgXmsgMsc* XmsgMscCfgPb::mutable_superior(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgMscCfgPb.superior)
  return superior_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::XmsgMscCfgXmsgMsc >*
XmsgMscCfgPb::mutable_superior() {
  // @@protoc_insertion_point(field_mutable_list:XmsgMscCfgPb.superior)
  return &superior_;
}
inline const ::XmsgMscCfgXmsgMsc& XmsgMscCfgPb::superior(int index) const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgPb.superior)
  return superior_.Get(index);
}
inline ::XmsgMscCfgXmsgMsc* XmsgMscCfgPb::add_superior() {
  // @@protoc_insertion_point(field_add:XmsgMscCfgPb.superior)
  return superior_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::XmsgMscCfgXmsgMsc >&
XmsgMscCfgPb::superior() const {
  // @@protoc_insertion_point(field_list:XmsgMscCfgPb.superior)
  return superior_;
}

// repeated .XmsgMscCfgXmsgNe subordinate = 6;
inline int XmsgMscCfgPb::subordinate_size() const {
  return subordinate_.size();
}
inline void XmsgMscCfgPb::clear_subordinate() {
  subordinate_.Clear();
}
inline ::XmsgMscCfgXmsgNe* XmsgMscCfgPb::mutable_subordinate(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgMscCfgPb.subordinate)
  return subordinate_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::XmsgMscCfgXmsgNe >*
XmsgMscCfgPb::mutable_subordinate() {
  // @@protoc_insertion_point(field_mutable_list:XmsgMscCfgPb.subordinate)
  return &subordinate_;
}
inline const ::XmsgMscCfgXmsgNe& XmsgMscCfgPb::subordinate(int index) const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgPb.subordinate)
  return subordinate_.Get(index);
}
inline ::XmsgMscCfgXmsgNe* XmsgMscCfgPb::add_subordinate() {
  // @@protoc_insertion_point(field_add:XmsgMscCfgPb.subordinate)
  return subordinate_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::XmsgMscCfgXmsgNe >&
XmsgMscCfgPb::subordinate() const {
  // @@protoc_insertion_point(field_list:XmsgMscCfgPb.subordinate)
  return subordinate_;
}

// repeated .XmsgMscCfgXmsgNe n2h = 7;
inline int XmsgMscCfgPb::n2h_size() const {
  return n2h_.size();
}
inline void XmsgMscCfgPb::clear_n2h() {
  n2h_.Clear();
}
inline ::XmsgMscCfgXmsgNe* XmsgMscCfgPb::mutable_n2h(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgMscCfgPb.n2h)
  return n2h_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::XmsgMscCfgXmsgNe >*
XmsgMscCfgPb::mutable_n2h() {
  // @@protoc_insertion_point(field_mutable_list:XmsgMscCfgPb.n2h)
  return &n2h_;
}
inline const ::XmsgMscCfgXmsgNe& XmsgMscCfgPb::n2h(int index) const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgPb.n2h)
  return n2h_.Get(index);
}
inline ::XmsgMscCfgXmsgNe* XmsgMscCfgPb::add_n2h() {
  // @@protoc_insertion_point(field_add:XmsgMscCfgPb.n2h)
  return n2h_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::XmsgMscCfgXmsgNe >&
XmsgMscCfgPb::n2h() const {
  // @@protoc_insertion_point(field_list:XmsgMscCfgPb.n2h)
  return n2h_;
}

// map<string, string> kafkaProd = 9;
inline int XmsgMscCfgPb::kafkaprod_size() const {
  return kafkaprod_.size();
}
inline void XmsgMscCfgPb::clear_kafkaprod() {
  kafkaprod_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
XmsgMscCfgPb::kafkaprod() const {
  // @@protoc_insertion_point(field_map:XmsgMscCfgPb.kafkaProd)
  return kafkaprod_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
XmsgMscCfgPb::mutable_kafkaprod() {
  // @@protoc_insertion_point(field_mutable_map:XmsgMscCfgPb.kafkaProd)
  return kafkaprod_.MutableMap();
}

// .XmsgMscCfgMisc misc = 8;
inline bool XmsgMscCfgPb::has_misc() const {
  return this != internal_default_instance() && misc_ != nullptr;
}
inline void XmsgMscCfgPb::clear_misc() {
  if (GetArenaNoVirtual() == nullptr && misc_ != nullptr) {
    delete misc_;
  }
  misc_ = nullptr;
}
inline const ::XmsgMscCfgMisc& XmsgMscCfgPb::misc() const {
  const ::XmsgMscCfgMisc* p = misc_;
  // @@protoc_insertion_point(field_get:XmsgMscCfgPb.misc)
  return p != nullptr ? *p : *reinterpret_cast<const ::XmsgMscCfgMisc*>(
      &::_XmsgMscCfgMisc_default_instance_);
}
inline ::XmsgMscCfgMisc* XmsgMscCfgPb::release_misc() {
  // @@protoc_insertion_point(field_release:XmsgMscCfgPb.misc)
  
  ::XmsgMscCfgMisc* temp = misc_;
  misc_ = nullptr;
  return temp;
}
inline ::XmsgMscCfgMisc* XmsgMscCfgPb::mutable_misc() {
  
  if (misc_ == nullptr) {
    auto* p = CreateMaybeMessage<::XmsgMscCfgMisc>(GetArenaNoVirtual());
    misc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:XmsgMscCfgPb.misc)
  return misc_;
}
inline void XmsgMscCfgPb::set_allocated_misc(::XmsgMscCfgMisc* misc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete misc_;
  }
  if (misc) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      misc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, misc, submessage_arena);
    }
    
  } else {
    
  }
  misc_ = misc;
  // @@protoc_insertion_point(field_set_allocated:XmsgMscCfgPb.misc)
}

// -------------------------------------------------------------------

// XmsgMscCfgLog

// string level = 1;
inline void XmsgMscCfgLog::clear_level() {
  level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgMscCfgLog::level() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgLog.level)
  return level_.GetNoArena();
}
inline void XmsgMscCfgLog::set_level(const ::std::string& value) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgMscCfgLog.level)
}
#if LANG_CXX11
inline void XmsgMscCfgLog::set_level(::std::string&& value) {
  
  level_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgMscCfgLog.level)
}
#endif
inline void XmsgMscCfgLog::set_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgMscCfgLog.level)
}
inline void XmsgMscCfgLog::set_level(const char* value, size_t size) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgMscCfgLog.level)
}
inline ::std::string* XmsgMscCfgLog::mutable_level() {
  
  // @@protoc_insertion_point(field_mutable:XmsgMscCfgLog.level)
  return level_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgMscCfgLog::release_level() {
  // @@protoc_insertion_point(field_release:XmsgMscCfgLog.level)
  
  return level_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgMscCfgLog::set_allocated_level(::std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  level_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level);
  // @@protoc_insertion_point(field_set_allocated:XmsgMscCfgLog.level)
}

// string output = 2;
inline void XmsgMscCfgLog::clear_output() {
  output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgMscCfgLog::output() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgLog.output)
  return output_.GetNoArena();
}
inline void XmsgMscCfgLog::set_output(const ::std::string& value) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgMscCfgLog.output)
}
#if LANG_CXX11
inline void XmsgMscCfgLog::set_output(::std::string&& value) {
  
  output_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgMscCfgLog.output)
}
#endif
inline void XmsgMscCfgLog::set_output(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgMscCfgLog.output)
}
inline void XmsgMscCfgLog::set_output(const char* value, size_t size) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgMscCfgLog.output)
}
inline ::std::string* XmsgMscCfgLog::mutable_output() {
  
  // @@protoc_insertion_point(field_mutable:XmsgMscCfgLog.output)
  return output_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgMscCfgLog::release_output() {
  // @@protoc_insertion_point(field_release:XmsgMscCfgLog.output)
  
  return output_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgMscCfgLog::set_allocated_output(::std::string* output) {
  if (output != nullptr) {
    
  } else {
    
  }
  output_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output);
  // @@protoc_insertion_point(field_set_allocated:XmsgMscCfgLog.output)
}

// -------------------------------------------------------------------

// XmsgMscCfgXscTcpServer

// string addr = 1;
inline void XmsgMscCfgXscTcpServer::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgMscCfgXscTcpServer::addr() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgXscTcpServer.addr)
  return addr_.GetNoArena();
}
inline void XmsgMscCfgXscTcpServer::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgMscCfgXscTcpServer.addr)
}
#if LANG_CXX11
inline void XmsgMscCfgXscTcpServer::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgMscCfgXscTcpServer.addr)
}
#endif
inline void XmsgMscCfgXscTcpServer::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgMscCfgXscTcpServer.addr)
}
inline void XmsgMscCfgXscTcpServer::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgMscCfgXscTcpServer.addr)
}
inline ::std::string* XmsgMscCfgXscTcpServer::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgMscCfgXscTcpServer.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgMscCfgXscTcpServer::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgMscCfgXscTcpServer.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgMscCfgXscTcpServer::set_allocated_addr(::std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgMscCfgXscTcpServer.addr)
}

// uint32 worker = 2;
inline void XmsgMscCfgXscTcpServer::clear_worker() {
  worker_ = 0u;
}
inline ::google::protobuf::uint32 XmsgMscCfgXscTcpServer::worker() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgXscTcpServer.worker)
  return worker_;
}
inline void XmsgMscCfgXscTcpServer::set_worker(::google::protobuf::uint32 value) {
  
  worker_ = value;
  // @@protoc_insertion_point(field_set:XmsgMscCfgXscTcpServer.worker)
}

// uint32 peerLimit = 3;
inline void XmsgMscCfgXscTcpServer::clear_peerlimit() {
  peerlimit_ = 0u;
}
inline ::google::protobuf::uint32 XmsgMscCfgXscTcpServer::peerlimit() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgXscTcpServer.peerLimit)
  return peerlimit_;
}
inline void XmsgMscCfgXscTcpServer::set_peerlimit(::google::protobuf::uint32 value) {
  
  peerlimit_ = value;
  // @@protoc_insertion_point(field_set:XmsgMscCfgXscTcpServer.peerLimit)
}

// uint32 peerMtu = 4;
inline void XmsgMscCfgXscTcpServer::clear_peermtu() {
  peermtu_ = 0u;
}
inline ::google::protobuf::uint32 XmsgMscCfgXscTcpServer::peermtu() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgXscTcpServer.peerMtu)
  return peermtu_;
}
inline void XmsgMscCfgXscTcpServer::set_peermtu(::google::protobuf::uint32 value) {
  
  peermtu_ = value;
  // @@protoc_insertion_point(field_set:XmsgMscCfgXscTcpServer.peerMtu)
}

// uint32 peerRcvBuf = 5;
inline void XmsgMscCfgXscTcpServer::clear_peerrcvbuf() {
  peerrcvbuf_ = 0u;
}
inline ::google::protobuf::uint32 XmsgMscCfgXscTcpServer::peerrcvbuf() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgXscTcpServer.peerRcvBuf)
  return peerrcvbuf_;
}
inline void XmsgMscCfgXscTcpServer::set_peerrcvbuf(::google::protobuf::uint32 value) {
  
  peerrcvbuf_ = value;
  // @@protoc_insertion_point(field_set:XmsgMscCfgXscTcpServer.peerRcvBuf)
}

// uint32 peerSndBuf = 6;
inline void XmsgMscCfgXscTcpServer::clear_peersndbuf() {
  peersndbuf_ = 0u;
}
inline ::google::protobuf::uint32 XmsgMscCfgXscTcpServer::peersndbuf() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgXscTcpServer.peerSndBuf)
  return peersndbuf_;
}
inline void XmsgMscCfgXscTcpServer::set_peersndbuf(::google::protobuf::uint32 value) {
  
  peersndbuf_ = value;
  // @@protoc_insertion_point(field_set:XmsgMscCfgXscTcpServer.peerSndBuf)
}

// uint32 lazyClose = 7;
inline void XmsgMscCfgXscTcpServer::clear_lazyclose() {
  lazyclose_ = 0u;
}
inline ::google::protobuf::uint32 XmsgMscCfgXscTcpServer::lazyclose() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgXscTcpServer.lazyClose)
  return lazyclose_;
}
inline void XmsgMscCfgXscTcpServer::set_lazyclose(::google::protobuf::uint32 value) {
  
  lazyclose_ = value;
  // @@protoc_insertion_point(field_set:XmsgMscCfgXscTcpServer.lazyClose)
}

// bool tracing = 8;
inline void XmsgMscCfgXscTcpServer::clear_tracing() {
  tracing_ = false;
}
inline bool XmsgMscCfgXscTcpServer::tracing() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgXscTcpServer.tracing)
  return tracing_;
}
inline void XmsgMscCfgXscTcpServer::set_tracing(bool value) {
  
  tracing_ = value;
  // @@protoc_insertion_point(field_set:XmsgMscCfgXscTcpServer.tracing)
}

// uint32 heartbeat = 9;
inline void XmsgMscCfgXscTcpServer::clear_heartbeat() {
  heartbeat_ = 0u;
}
inline ::google::protobuf::uint32 XmsgMscCfgXscTcpServer::heartbeat() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgXscTcpServer.heartbeat)
  return heartbeat_;
}
inline void XmsgMscCfgXscTcpServer::set_heartbeat(::google::protobuf::uint32 value) {
  
  heartbeat_ = value;
  // @@protoc_insertion_point(field_set:XmsgMscCfgXscTcpServer.heartbeat)
}

// uint32 n2hZombie = 10;
inline void XmsgMscCfgXscTcpServer::clear_n2hzombie() {
  n2hzombie_ = 0u;
}
inline ::google::protobuf::uint32 XmsgMscCfgXscTcpServer::n2hzombie() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgXscTcpServer.n2hZombie)
  return n2hzombie_;
}
inline void XmsgMscCfgXscTcpServer::set_n2hzombie(::google::protobuf::uint32 value) {
  
  n2hzombie_ = value;
  // @@protoc_insertion_point(field_set:XmsgMscCfgXscTcpServer.n2hZombie)
}

// uint32 n2hTransTimeout = 11;
inline void XmsgMscCfgXscTcpServer::clear_n2htranstimeout() {
  n2htranstimeout_ = 0u;
}
inline ::google::protobuf::uint32 XmsgMscCfgXscTcpServer::n2htranstimeout() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgXscTcpServer.n2hTransTimeout)
  return n2htranstimeout_;
}
inline void XmsgMscCfgXscTcpServer::set_n2htranstimeout(::google::protobuf::uint32 value) {
  
  n2htranstimeout_ = value;
  // @@protoc_insertion_point(field_set:XmsgMscCfgXscTcpServer.n2hTransTimeout)
}

// bool n2hTracing = 12;
inline void XmsgMscCfgXscTcpServer::clear_n2htracing() {
  n2htracing_ = false;
}
inline bool XmsgMscCfgXscTcpServer::n2htracing() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgXscTcpServer.n2hTracing)
  return n2htracing_;
}
inline void XmsgMscCfgXscTcpServer::set_n2htracing(bool value) {
  
  n2htracing_ = value;
  // @@protoc_insertion_point(field_set:XmsgMscCfgXscTcpServer.n2hTracing)
}

// uint32 h2nReConn = 13;
inline void XmsgMscCfgXscTcpServer::clear_h2nreconn() {
  h2nreconn_ = 0u;
}
inline ::google::protobuf::uint32 XmsgMscCfgXscTcpServer::h2nreconn() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgXscTcpServer.h2nReConn)
  return h2nreconn_;
}
inline void XmsgMscCfgXscTcpServer::set_h2nreconn(::google::protobuf::uint32 value) {
  
  h2nreconn_ = value;
  // @@protoc_insertion_point(field_set:XmsgMscCfgXscTcpServer.h2nReConn)
}

// uint32 h2nTransTimeout = 14;
inline void XmsgMscCfgXscTcpServer::clear_h2ntranstimeout() {
  h2ntranstimeout_ = 0u;
}
inline ::google::protobuf::uint32 XmsgMscCfgXscTcpServer::h2ntranstimeout() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgXscTcpServer.h2nTransTimeout)
  return h2ntranstimeout_;
}
inline void XmsgMscCfgXscTcpServer::set_h2ntranstimeout(::google::protobuf::uint32 value) {
  
  h2ntranstimeout_ = value;
  // @@protoc_insertion_point(field_set:XmsgMscCfgXscTcpServer.h2nTransTimeout)
}

// -------------------------------------------------------------------

// XmsgMscCfgXmsgNe

// string neg = 1;
inline void XmsgMscCfgXmsgNe::clear_neg() {
  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgMscCfgXmsgNe::neg() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgXmsgNe.neg)
  return neg_.GetNoArena();
}
inline void XmsgMscCfgXmsgNe::set_neg(const ::std::string& value) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgMscCfgXmsgNe.neg)
}
#if LANG_CXX11
inline void XmsgMscCfgXmsgNe::set_neg(::std::string&& value) {
  
  neg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgMscCfgXmsgNe.neg)
}
#endif
inline void XmsgMscCfgXmsgNe::set_neg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgMscCfgXmsgNe.neg)
}
inline void XmsgMscCfgXmsgNe::set_neg(const char* value, size_t size) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgMscCfgXmsgNe.neg)
}
inline ::std::string* XmsgMscCfgXmsgNe::mutable_neg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgMscCfgXmsgNe.neg)
  return neg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgMscCfgXmsgNe::release_neg() {
  // @@protoc_insertion_point(field_release:XmsgMscCfgXmsgNe.neg)
  
  return neg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgMscCfgXmsgNe::set_allocated_neg(::std::string* neg) {
  if (neg != nullptr) {
    
  } else {
    
  }
  neg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neg);
  // @@protoc_insertion_point(field_set_allocated:XmsgMscCfgXmsgNe.neg)
}

// string cgt = 2;
inline void XmsgMscCfgXmsgNe::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgMscCfgXmsgNe::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgXmsgNe.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgMscCfgXmsgNe::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgMscCfgXmsgNe.cgt)
}
#if LANG_CXX11
inline void XmsgMscCfgXmsgNe::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgMscCfgXmsgNe.cgt)
}
#endif
inline void XmsgMscCfgXmsgNe::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgMscCfgXmsgNe.cgt)
}
inline void XmsgMscCfgXmsgNe::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgMscCfgXmsgNe.cgt)
}
inline ::std::string* XmsgMscCfgXmsgNe::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgMscCfgXmsgNe.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgMscCfgXmsgNe::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgMscCfgXmsgNe.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgMscCfgXmsgNe::set_allocated_cgt(::std::string* cgt) {
  if (cgt != nullptr) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgMscCfgXmsgNe.cgt)
}

// string pwd = 3;
inline void XmsgMscCfgXmsgNe::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgMscCfgXmsgNe::pwd() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgXmsgNe.pwd)
  return pwd_.GetNoArena();
}
inline void XmsgMscCfgXmsgNe::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgMscCfgXmsgNe.pwd)
}
#if LANG_CXX11
inline void XmsgMscCfgXmsgNe::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgMscCfgXmsgNe.pwd)
}
#endif
inline void XmsgMscCfgXmsgNe::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgMscCfgXmsgNe.pwd)
}
inline void XmsgMscCfgXmsgNe::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgMscCfgXmsgNe.pwd)
}
inline ::std::string* XmsgMscCfgXmsgNe::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:XmsgMscCfgXmsgNe.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgMscCfgXmsgNe::release_pwd() {
  // @@protoc_insertion_point(field_release:XmsgMscCfgXmsgNe.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgMscCfgXmsgNe::set_allocated_pwd(::std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:XmsgMscCfgXmsgNe.pwd)
}

// string addr = 4;
inline void XmsgMscCfgXmsgNe::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgMscCfgXmsgNe::addr() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgXmsgNe.addr)
  return addr_.GetNoArena();
}
inline void XmsgMscCfgXmsgNe::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgMscCfgXmsgNe.addr)
}
#if LANG_CXX11
inline void XmsgMscCfgXmsgNe::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgMscCfgXmsgNe.addr)
}
#endif
inline void XmsgMscCfgXmsgNe::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgMscCfgXmsgNe.addr)
}
inline void XmsgMscCfgXmsgNe::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgMscCfgXmsgNe.addr)
}
inline ::std::string* XmsgMscCfgXmsgNe::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgMscCfgXmsgNe.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgMscCfgXmsgNe::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgMscCfgXmsgNe.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgMscCfgXmsgNe::set_allocated_addr(::std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgMscCfgXmsgNe.addr)
}

// -------------------------------------------------------------------

// XmsgMscCfgXmsgMsc

// string cgt = 1;
inline void XmsgMscCfgXmsgMsc::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgMscCfgXmsgMsc::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgXmsgMsc.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgMscCfgXmsgMsc::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgMscCfgXmsgMsc.cgt)
}
#if LANG_CXX11
inline void XmsgMscCfgXmsgMsc::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgMscCfgXmsgMsc.cgt)
}
#endif
inline void XmsgMscCfgXmsgMsc::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgMscCfgXmsgMsc.cgt)
}
inline void XmsgMscCfgXmsgMsc::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgMscCfgXmsgMsc.cgt)
}
inline ::std::string* XmsgMscCfgXmsgMsc::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgMscCfgXmsgMsc.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgMscCfgXmsgMsc::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgMscCfgXmsgMsc.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgMscCfgXmsgMsc::set_allocated_cgt(::std::string* cgt) {
  if (cgt != nullptr) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgMscCfgXmsgMsc.cgt)
}

// string addr = 2;
inline void XmsgMscCfgXmsgMsc::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgMscCfgXmsgMsc::addr() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgXmsgMsc.addr)
  return addr_.GetNoArena();
}
inline void XmsgMscCfgXmsgMsc::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgMscCfgXmsgMsc.addr)
}
#if LANG_CXX11
inline void XmsgMscCfgXmsgMsc::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgMscCfgXmsgMsc.addr)
}
#endif
inline void XmsgMscCfgXmsgMsc::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgMscCfgXmsgMsc.addr)
}
inline void XmsgMscCfgXmsgMsc::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgMscCfgXmsgMsc.addr)
}
inline ::std::string* XmsgMscCfgXmsgMsc::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgMscCfgXmsgMsc.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgMscCfgXmsgMsc::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgMscCfgXmsgMsc.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgMscCfgXmsgMsc::set_allocated_addr(::std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgMscCfgXmsgMsc.addr)
}

// string pwd = 3;
inline void XmsgMscCfgXmsgMsc::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgMscCfgXmsgMsc::pwd() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgXmsgMsc.pwd)
  return pwd_.GetNoArena();
}
inline void XmsgMscCfgXmsgMsc::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgMscCfgXmsgMsc.pwd)
}
#if LANG_CXX11
inline void XmsgMscCfgXmsgMsc::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgMscCfgXmsgMsc.pwd)
}
#endif
inline void XmsgMscCfgXmsgMsc::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgMscCfgXmsgMsc.pwd)
}
inline void XmsgMscCfgXmsgMsc::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgMscCfgXmsgMsc.pwd)
}
inline ::std::string* XmsgMscCfgXmsgMsc::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:XmsgMscCfgXmsgMsc.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgMscCfgXmsgMsc::release_pwd() {
  // @@protoc_insertion_point(field_release:XmsgMscCfgXmsgMsc.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgMscCfgXmsgMsc::set_allocated_pwd(::std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:XmsgMscCfgXmsgMsc.pwd)
}

// string alg = 4;
inline void XmsgMscCfgXmsgMsc::clear_alg() {
  alg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgMscCfgXmsgMsc::alg() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgXmsgMsc.alg)
  return alg_.GetNoArena();
}
inline void XmsgMscCfgXmsgMsc::set_alg(const ::std::string& value) {
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgMscCfgXmsgMsc.alg)
}
#if LANG_CXX11
inline void XmsgMscCfgXmsgMsc::set_alg(::std::string&& value) {
  
  alg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgMscCfgXmsgMsc.alg)
}
#endif
inline void XmsgMscCfgXmsgMsc::set_alg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgMscCfgXmsgMsc.alg)
}
inline void XmsgMscCfgXmsgMsc::set_alg(const char* value, size_t size) {
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgMscCfgXmsgMsc.alg)
}
inline ::std::string* XmsgMscCfgXmsgMsc::mutable_alg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgMscCfgXmsgMsc.alg)
  return alg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgMscCfgXmsgMsc::release_alg() {
  // @@protoc_insertion_point(field_release:XmsgMscCfgXmsgMsc.alg)
  
  return alg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgMscCfgXmsgMsc::set_allocated_alg(::std::string* alg) {
  if (alg != nullptr) {
    
  } else {
    
  }
  alg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alg);
  // @@protoc_insertion_point(field_set_allocated:XmsgMscCfgXmsgMsc.alg)
}

// -------------------------------------------------------------------

// XmsgMscCfgMisc

// uint32 runMode = 1;
inline void XmsgMscCfgMisc::clear_runmode() {
  runmode_ = 0u;
}
inline ::google::protobuf::uint32 XmsgMscCfgMisc::runmode() const {
  // @@protoc_insertion_point(field_get:XmsgMscCfgMisc.runMode)
  return runmode_;
}
inline void XmsgMscCfgMisc::set_runmode(::google::protobuf::uint32 value) {
  
  runmode_ = value;
  // @@protoc_insertion_point(field_set:XmsgMscCfgMisc.runMode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_cfg_2dx_2dmsg_2dmsc_2eproto
