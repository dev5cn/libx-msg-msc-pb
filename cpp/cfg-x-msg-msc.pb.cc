// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfg-x-msg-msc.proto

#include "cfg-x-msg-msc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_cfg_2dx_2dmsg_2dmsc_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_XmsgMscCfgLog_cfg_2dx_2dmsg_2dmsc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cfg_2dx_2dmsg_2dmsc_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_XmsgMscCfgMisc_cfg_2dx_2dmsg_2dmsc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cfg_2dx_2dmsg_2dmsc_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_XmsgMscCfgPb_KafkaProdEntry_DoNotUse_cfg_2dx_2dmsg_2dmsc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cfg_2dx_2dmsg_2dmsc_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_XmsgMscCfgXmsgMsc_cfg_2dx_2dmsg_2dmsc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cfg_2dx_2dmsg_2dmsc_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_XmsgMscCfgXmsgNe_cfg_2dx_2dmsg_2dmsc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cfg_2dx_2dmsg_2dmsc_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_XmsgMscCfgXscTcpServer_cfg_2dx_2dmsg_2dmsc_2eproto;
class XmsgMscCfgPb_KafkaProdEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgMscCfgPb_KafkaProdEntry_DoNotUse> _instance;
} _XmsgMscCfgPb_KafkaProdEntry_DoNotUse_default_instance_;
class XmsgMscCfgPbDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgMscCfgPb> _instance;
} _XmsgMscCfgPb_default_instance_;
class XmsgMscCfgLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgMscCfgLog> _instance;
} _XmsgMscCfgLog_default_instance_;
class XmsgMscCfgXscTcpServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgMscCfgXscTcpServer> _instance;
} _XmsgMscCfgXscTcpServer_default_instance_;
class XmsgMscCfgXmsgNeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgMscCfgXmsgNe> _instance;
} _XmsgMscCfgXmsgNe_default_instance_;
class XmsgMscCfgXmsgMscDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgMscCfgXmsgMsc> _instance;
} _XmsgMscCfgXmsgMsc_default_instance_;
class XmsgMscCfgMiscDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgMscCfgMisc> _instance;
} _XmsgMscCfgMisc_default_instance_;
static void InitDefaultsXmsgMscCfgPb_KafkaProdEntry_DoNotUse_cfg_2dx_2dmsg_2dmsc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_XmsgMscCfgPb_KafkaProdEntry_DoNotUse_default_instance_;
    new (ptr) ::XmsgMscCfgPb_KafkaProdEntry_DoNotUse();
  }
  ::XmsgMscCfgPb_KafkaProdEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_XmsgMscCfgPb_KafkaProdEntry_DoNotUse_cfg_2dx_2dmsg_2dmsc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsXmsgMscCfgPb_KafkaProdEntry_DoNotUse_cfg_2dx_2dmsg_2dmsc_2eproto}, {}};

static void InitDefaultsXmsgMscCfgPb_cfg_2dx_2dmsg_2dmsc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_XmsgMscCfgPb_default_instance_;
    new (ptr) ::XmsgMscCfgPb();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgMscCfgPb::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_XmsgMscCfgPb_cfg_2dx_2dmsg_2dmsc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsXmsgMscCfgPb_cfg_2dx_2dmsg_2dmsc_2eproto}, {
      &scc_info_XmsgMscCfgLog_cfg_2dx_2dmsg_2dmsc_2eproto.base,
      &scc_info_XmsgMscCfgXscTcpServer_cfg_2dx_2dmsg_2dmsc_2eproto.base,
      &scc_info_XmsgMscCfgXmsgMsc_cfg_2dx_2dmsg_2dmsc_2eproto.base,
      &scc_info_XmsgMscCfgXmsgNe_cfg_2dx_2dmsg_2dmsc_2eproto.base,
      &scc_info_XmsgMscCfgPb_KafkaProdEntry_DoNotUse_cfg_2dx_2dmsg_2dmsc_2eproto.base,
      &scc_info_XmsgMscCfgMisc_cfg_2dx_2dmsg_2dmsc_2eproto.base,}};

static void InitDefaultsXmsgMscCfgLog_cfg_2dx_2dmsg_2dmsc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_XmsgMscCfgLog_default_instance_;
    new (ptr) ::XmsgMscCfgLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgMscCfgLog::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_XmsgMscCfgLog_cfg_2dx_2dmsg_2dmsc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsXmsgMscCfgLog_cfg_2dx_2dmsg_2dmsc_2eproto}, {}};

static void InitDefaultsXmsgMscCfgXscTcpServer_cfg_2dx_2dmsg_2dmsc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_XmsgMscCfgXscTcpServer_default_instance_;
    new (ptr) ::XmsgMscCfgXscTcpServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgMscCfgXscTcpServer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_XmsgMscCfgXscTcpServer_cfg_2dx_2dmsg_2dmsc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsXmsgMscCfgXscTcpServer_cfg_2dx_2dmsg_2dmsc_2eproto}, {}};

static void InitDefaultsXmsgMscCfgXmsgNe_cfg_2dx_2dmsg_2dmsc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_XmsgMscCfgXmsgNe_default_instance_;
    new (ptr) ::XmsgMscCfgXmsgNe();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgMscCfgXmsgNe::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_XmsgMscCfgXmsgNe_cfg_2dx_2dmsg_2dmsc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsXmsgMscCfgXmsgNe_cfg_2dx_2dmsg_2dmsc_2eproto}, {}};

static void InitDefaultsXmsgMscCfgXmsgMsc_cfg_2dx_2dmsg_2dmsc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_XmsgMscCfgXmsgMsc_default_instance_;
    new (ptr) ::XmsgMscCfgXmsgMsc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgMscCfgXmsgMsc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_XmsgMscCfgXmsgMsc_cfg_2dx_2dmsg_2dmsc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsXmsgMscCfgXmsgMsc_cfg_2dx_2dmsg_2dmsc_2eproto}, {}};

static void InitDefaultsXmsgMscCfgMisc_cfg_2dx_2dmsg_2dmsc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_XmsgMscCfgMisc_default_instance_;
    new (ptr) ::XmsgMscCfgMisc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgMscCfgMisc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_XmsgMscCfgMisc_cfg_2dx_2dmsg_2dmsc_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsXmsgMscCfgMisc_cfg_2dx_2dmsg_2dmsc_2eproto}, {}};

void InitDefaults_cfg_2dx_2dmsg_2dmsc_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_XmsgMscCfgPb_KafkaProdEntry_DoNotUse_cfg_2dx_2dmsg_2dmsc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_XmsgMscCfgPb_cfg_2dx_2dmsg_2dmsc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_XmsgMscCfgLog_cfg_2dx_2dmsg_2dmsc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_XmsgMscCfgXscTcpServer_cfg_2dx_2dmsg_2dmsc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_XmsgMscCfgXmsgNe_cfg_2dx_2dmsg_2dmsc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_XmsgMscCfgXmsgMsc_cfg_2dx_2dmsg_2dmsc_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_XmsgMscCfgMisc_cfg_2dx_2dmsg_2dmsc_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_cfg_2dx_2dmsg_2dmsc_2eproto[7];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_cfg_2dx_2dmsg_2dmsc_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_cfg_2dx_2dmsg_2dmsc_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_cfg_2dx_2dmsg_2dmsc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgPb_KafkaProdEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgPb_KafkaProdEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgPb_KafkaProdEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgPb_KafkaProdEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgPb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgPb, cgt_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgPb, log_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgPb, pub_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgPb, pri_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgPb, superior_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgPb, subordinate_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgPb, n2h_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgPb, kafkaprod_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgPb, misc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgLog, level_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgLog, output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXscTcpServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXscTcpServer, addr_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXscTcpServer, worker_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXscTcpServer, peerlimit_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXscTcpServer, peermtu_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXscTcpServer, peerrcvbuf_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXscTcpServer, peersndbuf_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXscTcpServer, lazyclose_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXscTcpServer, tracing_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXscTcpServer, heartbeat_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXscTcpServer, n2hzombie_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXscTcpServer, n2htranstimeout_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXscTcpServer, n2htracing_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXscTcpServer, h2nreconn_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXscTcpServer, h2ntranstimeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXmsgNe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXmsgNe, neg_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXmsgNe, cgt_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXmsgNe, pwd_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXmsgNe, addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXmsgMsc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXmsgMsc, cgt_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXmsgMsc, addr_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXmsgMsc, pwd_),
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgXmsgMsc, alg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgMisc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::XmsgMscCfgMisc, runmode_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::XmsgMscCfgPb_KafkaProdEntry_DoNotUse)},
  { 9, -1, sizeof(::XmsgMscCfgPb)},
  { 23, -1, sizeof(::XmsgMscCfgLog)},
  { 30, -1, sizeof(::XmsgMscCfgXscTcpServer)},
  { 49, -1, sizeof(::XmsgMscCfgXmsgNe)},
  { 58, -1, sizeof(::XmsgMscCfgXmsgMsc)},
  { 67, -1, sizeof(::XmsgMscCfgMisc)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgMscCfgPb_KafkaProdEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgMscCfgPb_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgMscCfgLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgMscCfgXscTcpServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgMscCfgXmsgNe_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgMscCfgXmsgMsc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgMscCfgMisc_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_cfg_2dx_2dmsg_2dmsc_2eproto = {
  {}, AddDescriptors_cfg_2dx_2dmsg_2dmsc_2eproto, "cfg-x-msg-msc.proto", schemas,
  file_default_instances, TableStruct_cfg_2dx_2dmsg_2dmsc_2eproto::offsets,
  file_level_metadata_cfg_2dx_2dmsg_2dmsc_2eproto, 7, file_level_enum_descriptors_cfg_2dx_2dmsg_2dmsc_2eproto, file_level_service_descriptors_cfg_2dx_2dmsg_2dmsc_2eproto,
};

const char descriptor_table_protodef_cfg_2dx_2dmsg_2dmsc_2eproto[] =
  "\n\023cfg-x-msg-msc.proto\"\364\002\n\014XmsgMscCfgPb\022\013"
  "\n\003cgt\030\001 \001(\t\022\033\n\003log\030\002 \001(\0132\016.XmsgMscCfgLog"
  "\022$\n\003pub\030\003 \001(\0132\027.XmsgMscCfgXscTcpServer\022$"
  "\n\003pri\030\004 \001(\0132\027.XmsgMscCfgXscTcpServer\022$\n\010"
  "superior\030\005 \003(\0132\022.XmsgMscCfgXmsgMsc\022&\n\013su"
  "bordinate\030\006 \003(\0132\021.XmsgMscCfgXmsgNe\022\036\n\003n2"
  "h\030\007 \003(\0132\021.XmsgMscCfgXmsgNe\022/\n\tkafkaProd\030"
  "\t \003(\0132\034.XmsgMscCfgPb.KafkaProdEntry\022\035\n\004m"
  "isc\030\010 \001(\0132\017.XmsgMscCfgMisc\0320\n\016KafkaProdE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\".\n\r"
  "XmsgMscCfgLog\022\r\n\005level\030\001 \001(\t\022\016\n\006output\030\002"
  " \001(\t\"\245\002\n\026XmsgMscCfgXscTcpServer\022\014\n\004addr\030"
  "\001 \001(\t\022\016\n\006worker\030\002 \001(\r\022\021\n\tpeerLimit\030\003 \001(\r"
  "\022\017\n\007peerMtu\030\004 \001(\r\022\022\n\npeerRcvBuf\030\005 \001(\r\022\022\n"
  "\npeerSndBuf\030\006 \001(\r\022\021\n\tlazyClose\030\007 \001(\r\022\017\n\007"
  "tracing\030\010 \001(\010\022\021\n\theartbeat\030\t \001(\r\022\021\n\tn2hZ"
  "ombie\030\n \001(\r\022\027\n\017n2hTransTimeout\030\013 \001(\r\022\022\n\n"
  "n2hTracing\030\014 \001(\010\022\021\n\th2nReConn\030\r \001(\r\022\027\n\017h"
  "2nTransTimeout\030\016 \001(\r\"G\n\020XmsgMscCfgXmsgNe"
  "\022\013\n\003neg\030\001 \001(\t\022\013\n\003cgt\030\002 \001(\t\022\013\n\003pwd\030\003 \001(\t\022"
  "\014\n\004addr\030\004 \001(\t\"H\n\021XmsgMscCfgXmsgMsc\022\013\n\003cg"
  "t\030\001 \001(\t\022\014\n\004addr\030\002 \001(\t\022\013\n\003pwd\030\003 \001(\t\022\013\n\003al"
  "g\030\004 \001(\t\"!\n\016XmsgMscCfgMisc\022\017\n\007runMode\030\001 \001"
  "(\rb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_cfg_2dx_2dmsg_2dmsc_2eproto = {
  false, InitDefaults_cfg_2dx_2dmsg_2dmsc_2eproto, 
  descriptor_table_protodef_cfg_2dx_2dmsg_2dmsc_2eproto,
  "cfg-x-msg-msc.proto", &assign_descriptors_table_cfg_2dx_2dmsg_2dmsc_2eproto, 930,
};

void AddDescriptors_cfg_2dx_2dmsg_2dmsc_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_cfg_2dx_2dmsg_2dmsc_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cfg_2dx_2dmsg_2dmsc_2eproto = []() { AddDescriptors_cfg_2dx_2dmsg_2dmsc_2eproto(); return true; }();

// ===================================================================

XmsgMscCfgPb_KafkaProdEntry_DoNotUse::XmsgMscCfgPb_KafkaProdEntry_DoNotUse() {}
XmsgMscCfgPb_KafkaProdEntry_DoNotUse::XmsgMscCfgPb_KafkaProdEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void XmsgMscCfgPb_KafkaProdEntry_DoNotUse::MergeFrom(const XmsgMscCfgPb_KafkaProdEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata XmsgMscCfgPb_KafkaProdEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cfg_2dx_2dmsg_2dmsc_2eproto);
  return ::file_level_metadata_cfg_2dx_2dmsg_2dmsc_2eproto[0];
}
void XmsgMscCfgPb_KafkaProdEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool XmsgMscCfgPb_KafkaProdEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      XmsgMscCfgPb_KafkaProdEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "XmsgMscCfgPb.KafkaProdEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "XmsgMscCfgPb.KafkaProdEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void XmsgMscCfgPb::InitAsDefaultInstance() {
  ::_XmsgMscCfgPb_default_instance_._instance.get_mutable()->log_ = const_cast< ::XmsgMscCfgLog*>(
      ::XmsgMscCfgLog::internal_default_instance());
  ::_XmsgMscCfgPb_default_instance_._instance.get_mutable()->pub_ = const_cast< ::XmsgMscCfgXscTcpServer*>(
      ::XmsgMscCfgXscTcpServer::internal_default_instance());
  ::_XmsgMscCfgPb_default_instance_._instance.get_mutable()->pri_ = const_cast< ::XmsgMscCfgXscTcpServer*>(
      ::XmsgMscCfgXscTcpServer::internal_default_instance());
  ::_XmsgMscCfgPb_default_instance_._instance.get_mutable()->misc_ = const_cast< ::XmsgMscCfgMisc*>(
      ::XmsgMscCfgMisc::internal_default_instance());
}
class XmsgMscCfgPb::HasBitSetters {
 public:
  static const ::XmsgMscCfgLog& log(const XmsgMscCfgPb* msg);
  static const ::XmsgMscCfgXscTcpServer& pub(const XmsgMscCfgPb* msg);
  static const ::XmsgMscCfgXscTcpServer& pri(const XmsgMscCfgPb* msg);
  static const ::XmsgMscCfgMisc& misc(const XmsgMscCfgPb* msg);
};

const ::XmsgMscCfgLog&
XmsgMscCfgPb::HasBitSetters::log(const XmsgMscCfgPb* msg) {
  return *msg->log_;
}
const ::XmsgMscCfgXscTcpServer&
XmsgMscCfgPb::HasBitSetters::pub(const XmsgMscCfgPb* msg) {
  return *msg->pub_;
}
const ::XmsgMscCfgXscTcpServer&
XmsgMscCfgPb::HasBitSetters::pri(const XmsgMscCfgPb* msg) {
  return *msg->pri_;
}
const ::XmsgMscCfgMisc&
XmsgMscCfgPb::HasBitSetters::misc(const XmsgMscCfgPb* msg) {
  return *msg->misc_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgMscCfgPb::kCgtFieldNumber;
const int XmsgMscCfgPb::kLogFieldNumber;
const int XmsgMscCfgPb::kPubFieldNumber;
const int XmsgMscCfgPb::kPriFieldNumber;
const int XmsgMscCfgPb::kSuperiorFieldNumber;
const int XmsgMscCfgPb::kSubordinateFieldNumber;
const int XmsgMscCfgPb::kN2HFieldNumber;
const int XmsgMscCfgPb::kKafkaProdFieldNumber;
const int XmsgMscCfgPb::kMiscFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgMscCfgPb::XmsgMscCfgPb()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgMscCfgPb)
}
XmsgMscCfgPb::XmsgMscCfgPb(const XmsgMscCfgPb& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      superior_(from.superior_),
      subordinate_(from.subordinate_),
      n2h_(from.n2h_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kafkaprod_.MergeFrom(from.kafkaprod_);
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cgt().size() > 0) {
    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.has_log()) {
    log_ = new ::XmsgMscCfgLog(*from.log_);
  } else {
    log_ = nullptr;
  }
  if (from.has_pub()) {
    pub_ = new ::XmsgMscCfgXscTcpServer(*from.pub_);
  } else {
    pub_ = nullptr;
  }
  if (from.has_pri()) {
    pri_ = new ::XmsgMscCfgXscTcpServer(*from.pri_);
  } else {
    pri_ = nullptr;
  }
  if (from.has_misc()) {
    misc_ = new ::XmsgMscCfgMisc(*from.misc_);
  } else {
    misc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XmsgMscCfgPb)
}

void XmsgMscCfgPb::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_XmsgMscCfgPb_cfg_2dx_2dmsg_2dmsc_2eproto.base);
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&log_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&misc_) -
      reinterpret_cast<char*>(&log_)) + sizeof(misc_));
}

XmsgMscCfgPb::~XmsgMscCfgPb() {
  // @@protoc_insertion_point(destructor:XmsgMscCfgPb)
  SharedDtor();
}

void XmsgMscCfgPb::SharedDtor() {
  cgt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete log_;
  if (this != internal_default_instance()) delete pub_;
  if (this != internal_default_instance()) delete pri_;
  if (this != internal_default_instance()) delete misc_;
}

void XmsgMscCfgPb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XmsgMscCfgPb& XmsgMscCfgPb::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_XmsgMscCfgPb_cfg_2dx_2dmsg_2dmsc_2eproto.base);
  return *internal_default_instance();
}


void XmsgMscCfgPb::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgMscCfgPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  superior_.Clear();
  subordinate_.Clear();
  n2h_.Clear();
  kafkaprod_.Clear();
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && log_ != nullptr) {
    delete log_;
  }
  log_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pub_ != nullptr) {
    delete pub_;
  }
  pub_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pri_ != nullptr) {
    delete pri_;
  }
  pri_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && misc_ != nullptr) {
    delete misc_;
  }
  misc_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* XmsgMscCfgPb::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<XmsgMscCfgPb*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string cgt = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("XmsgMscCfgPb.cgt");
        object = msg->mutable_cgt();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .XmsgMscCfgLog log = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::XmsgMscCfgLog::_InternalParse;
        object = msg->mutable_log();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .XmsgMscCfgXscTcpServer pub = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::XmsgMscCfgXscTcpServer::_InternalParse;
        object = msg->mutable_pub();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .XmsgMscCfgXscTcpServer pri = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::XmsgMscCfgXscTcpServer::_InternalParse;
        object = msg->mutable_pri();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .XmsgMscCfgXmsgMsc superior = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::XmsgMscCfgXmsgMsc::_InternalParse;
          object = msg->add_superior();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // repeated .XmsgMscCfgXmsgNe subordinate = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::XmsgMscCfgXmsgNe::_InternalParse;
          object = msg->add_subordinate();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // repeated .XmsgMscCfgXmsgNe n2h = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::XmsgMscCfgXmsgNe::_InternalParse;
          object = msg->add_n2h();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // .XmsgMscCfgMisc misc = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::XmsgMscCfgMisc::_InternalParse;
        object = msg->mutable_misc();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // map<string, string> kafkaProd = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::XmsgMscCfgPb_KafkaProdEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->kafkaprod_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool XmsgMscCfgPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgMscCfgPb)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cgt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cgt().data(), static_cast<int>(this->cgt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgMscCfgPb.cgt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgMscCfgLog log = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgMscCfgXscTcpServer pub = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pub()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgMscCfgXscTcpServer pri = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pri()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .XmsgMscCfgXmsgMsc superior = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_superior()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .XmsgMscCfgXmsgNe subordinate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_subordinate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .XmsgMscCfgXmsgNe n2h = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_n2h()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgMscCfgMisc misc = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_misc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> kafkaProd = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          XmsgMscCfgPb_KafkaProdEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              XmsgMscCfgPb_KafkaProdEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&kafkaprod_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgMscCfgPb.KafkaProdEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgMscCfgPb.KafkaProdEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgMscCfgPb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgMscCfgPb)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void XmsgMscCfgPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgMscCfgPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgPb.cgt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cgt(), output);
  }

  // .XmsgMscCfgLog log = 2;
  if (this->has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::log(this), output);
  }

  // .XmsgMscCfgXscTcpServer pub = 3;
  if (this->has_pub()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pub(this), output);
  }

  // .XmsgMscCfgXscTcpServer pri = 4;
  if (this->has_pri()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::pri(this), output);
  }

  // repeated .XmsgMscCfgXmsgMsc superior = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->superior_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->superior(static_cast<int>(i)),
      output);
  }

  // repeated .XmsgMscCfgXmsgNe subordinate = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subordinate_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->subordinate(static_cast<int>(i)),
      output);
  }

  // repeated .XmsgMscCfgXmsgNe n2h = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->n2h_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->n2h(static_cast<int>(i)),
      output);
  }

  // .XmsgMscCfgMisc misc = 8;
  if (this->has_misc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::misc(this), output);
  }

  // map<string, string> kafkaProd = 9;
  if (!this->kafkaprod().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgMscCfgPb.KafkaProdEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgMscCfgPb.KafkaProdEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->kafkaprod().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->kafkaprod().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->kafkaprod().begin();
          it != this->kafkaprod().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<XmsgMscCfgPb_KafkaProdEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(kafkaprod_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(9, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<XmsgMscCfgPb_KafkaProdEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->kafkaprod().begin();
          it != this->kafkaprod().end(); ++it) {
        entry.reset(kafkaprod_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(9, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgMscCfgPb)
}

::google::protobuf::uint8* XmsgMscCfgPb::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XmsgMscCfgPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgPb.cgt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cgt(), target);
  }

  // .XmsgMscCfgLog log = 2;
  if (this->has_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::log(this), target);
  }

  // .XmsgMscCfgXscTcpServer pub = 3;
  if (this->has_pub()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pub(this), target);
  }

  // .XmsgMscCfgXscTcpServer pri = 4;
  if (this->has_pri()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::pri(this), target);
  }

  // repeated .XmsgMscCfgXmsgMsc superior = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->superior_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->superior(static_cast<int>(i)), target);
  }

  // repeated .XmsgMscCfgXmsgNe subordinate = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subordinate_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->subordinate(static_cast<int>(i)), target);
  }

  // repeated .XmsgMscCfgXmsgNe n2h = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->n2h_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->n2h(static_cast<int>(i)), target);
  }

  // .XmsgMscCfgMisc misc = 8;
  if (this->has_misc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::misc(this), target);
  }

  // map<string, string> kafkaProd = 9;
  if (!this->kafkaprod().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgMscCfgPb.KafkaProdEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgMscCfgPb.KafkaProdEntry.value");
      }
    };

    if (false &&
        this->kafkaprod().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->kafkaprod().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->kafkaprod().begin();
          it != this->kafkaprod().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<XmsgMscCfgPb_KafkaProdEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(kafkaprod_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(9, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<XmsgMscCfgPb_KafkaProdEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->kafkaprod().begin();
          it != this->kafkaprod().end(); ++it) {
        entry.reset(kafkaprod_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(9, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgMscCfgPb)
  return target;
}

size_t XmsgMscCfgPb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgMscCfgPb)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XmsgMscCfgXmsgMsc superior = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->superior_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->superior(static_cast<int>(i)));
    }
  }

  // repeated .XmsgMscCfgXmsgNe subordinate = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->subordinate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->subordinate(static_cast<int>(i)));
    }
  }

  // repeated .XmsgMscCfgXmsgNe n2h = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->n2h_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->n2h(static_cast<int>(i)));
    }
  }

  // map<string, string> kafkaProd = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->kafkaprod_size());
  {
    ::std::unique_ptr<XmsgMscCfgPb_KafkaProdEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->kafkaprod().begin();
        it != this->kafkaprod().end(); ++it) {
      entry.reset(kafkaprod_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cgt());
  }

  // .XmsgMscCfgLog log = 2;
  if (this->has_log()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *log_);
  }

  // .XmsgMscCfgXscTcpServer pub = 3;
  if (this->has_pub()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pub_);
  }

  // .XmsgMscCfgXscTcpServer pri = 4;
  if (this->has_pri()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pri_);
  }

  // .XmsgMscCfgMisc misc = 8;
  if (this->has_misc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *misc_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XmsgMscCfgPb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgMscCfgPb)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgMscCfgPb* source =
      ::google::protobuf::DynamicCastToGenerated<XmsgMscCfgPb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgMscCfgPb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgMscCfgPb)
    MergeFrom(*source);
  }
}

void XmsgMscCfgPb::MergeFrom(const XmsgMscCfgPb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgMscCfgPb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  superior_.MergeFrom(from.superior_);
  subordinate_.MergeFrom(from.subordinate_);
  n2h_.MergeFrom(from.n2h_);
  kafkaprod_.MergeFrom(from.kafkaprod_);
  if (from.cgt().size() > 0) {

    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.has_log()) {
    mutable_log()->::XmsgMscCfgLog::MergeFrom(from.log());
  }
  if (from.has_pub()) {
    mutable_pub()->::XmsgMscCfgXscTcpServer::MergeFrom(from.pub());
  }
  if (from.has_pri()) {
    mutable_pri()->::XmsgMscCfgXscTcpServer::MergeFrom(from.pri());
  }
  if (from.has_misc()) {
    mutable_misc()->::XmsgMscCfgMisc::MergeFrom(from.misc());
  }
}

void XmsgMscCfgPb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgMscCfgPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgMscCfgPb::CopyFrom(const XmsgMscCfgPb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgMscCfgPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgMscCfgPb::IsInitialized() const {
  return true;
}

void XmsgMscCfgPb::Swap(XmsgMscCfgPb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgMscCfgPb::InternalSwap(XmsgMscCfgPb* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&superior_)->InternalSwap(CastToBase(&other->superior_));
  CastToBase(&subordinate_)->InternalSwap(CastToBase(&other->subordinate_));
  CastToBase(&n2h_)->InternalSwap(CastToBase(&other->n2h_));
  kafkaprod_.Swap(&other->kafkaprod_);
  cgt_.Swap(&other->cgt_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(log_, other->log_);
  swap(pub_, other->pub_);
  swap(pri_, other->pri_);
  swap(misc_, other->misc_);
}

::google::protobuf::Metadata XmsgMscCfgPb::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cfg_2dx_2dmsg_2dmsc_2eproto);
  return ::file_level_metadata_cfg_2dx_2dmsg_2dmsc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void XmsgMscCfgLog::InitAsDefaultInstance() {
}
class XmsgMscCfgLog::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgMscCfgLog::kLevelFieldNumber;
const int XmsgMscCfgLog::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgMscCfgLog::XmsgMscCfgLog()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgMscCfgLog)
}
XmsgMscCfgLog::XmsgMscCfgLog(const XmsgMscCfgLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.level().size() > 0) {
    level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_);
  }
  output_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.output().size() > 0) {
    output_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgMscCfgLog)
}

void XmsgMscCfgLog::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_XmsgMscCfgLog_cfg_2dx_2dmsg_2dmsc_2eproto.base);
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

XmsgMscCfgLog::~XmsgMscCfgLog() {
  // @@protoc_insertion_point(destructor:XmsgMscCfgLog)
  SharedDtor();
}

void XmsgMscCfgLog::SharedDtor() {
  level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgMscCfgLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XmsgMscCfgLog& XmsgMscCfgLog::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_XmsgMscCfgLog_cfg_2dx_2dmsg_2dmsc_2eproto.base);
  return *internal_default_instance();
}


void XmsgMscCfgLog::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgMscCfgLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* XmsgMscCfgLog::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<XmsgMscCfgLog*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string level = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("XmsgMscCfgLog.level");
        object = msg->mutable_level();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string output = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("XmsgMscCfgLog.output");
        object = msg->mutable_output();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool XmsgMscCfgLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgMscCfgLog)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->level().data(), static_cast<int>(this->level().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgMscCfgLog.level"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string output = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output().data(), static_cast<int>(this->output().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgMscCfgLog.output"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgMscCfgLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgMscCfgLog)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void XmsgMscCfgLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgMscCfgLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string level = 1;
  if (this->level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level().data(), static_cast<int>(this->level().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgLog.level");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->level(), output);
  }

  // string output = 2;
  if (this->output().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output().data(), static_cast<int>(this->output().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgLog.output");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->output(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgMscCfgLog)
}

::google::protobuf::uint8* XmsgMscCfgLog::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XmsgMscCfgLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string level = 1;
  if (this->level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level().data(), static_cast<int>(this->level().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgLog.level");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->level(), target);
  }

  // string output = 2;
  if (this->output().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output().data(), static_cast<int>(this->output().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgLog.output");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->output(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgMscCfgLog)
  return target;
}

size_t XmsgMscCfgLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgMscCfgLog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string level = 1;
  if (this->level().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->level());
  }

  // string output = 2;
  if (this->output().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XmsgMscCfgLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgMscCfgLog)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgMscCfgLog* source =
      ::google::protobuf::DynamicCastToGenerated<XmsgMscCfgLog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgMscCfgLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgMscCfgLog)
    MergeFrom(*source);
  }
}

void XmsgMscCfgLog::MergeFrom(const XmsgMscCfgLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgMscCfgLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level().size() > 0) {

    level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_);
  }
  if (from.output().size() > 0) {

    output_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
}

void XmsgMscCfgLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgMscCfgLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgMscCfgLog::CopyFrom(const XmsgMscCfgLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgMscCfgLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgMscCfgLog::IsInitialized() const {
  return true;
}

void XmsgMscCfgLog::Swap(XmsgMscCfgLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgMscCfgLog::InternalSwap(XmsgMscCfgLog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  level_.Swap(&other->level_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  output_.Swap(&other->output_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata XmsgMscCfgLog::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cfg_2dx_2dmsg_2dmsc_2eproto);
  return ::file_level_metadata_cfg_2dx_2dmsg_2dmsc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void XmsgMscCfgXscTcpServer::InitAsDefaultInstance() {
}
class XmsgMscCfgXscTcpServer::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgMscCfgXscTcpServer::kAddrFieldNumber;
const int XmsgMscCfgXscTcpServer::kWorkerFieldNumber;
const int XmsgMscCfgXscTcpServer::kPeerLimitFieldNumber;
const int XmsgMscCfgXscTcpServer::kPeerMtuFieldNumber;
const int XmsgMscCfgXscTcpServer::kPeerRcvBufFieldNumber;
const int XmsgMscCfgXscTcpServer::kPeerSndBufFieldNumber;
const int XmsgMscCfgXscTcpServer::kLazyCloseFieldNumber;
const int XmsgMscCfgXscTcpServer::kTracingFieldNumber;
const int XmsgMscCfgXscTcpServer::kHeartbeatFieldNumber;
const int XmsgMscCfgXscTcpServer::kN2HZombieFieldNumber;
const int XmsgMscCfgXscTcpServer::kN2HTransTimeoutFieldNumber;
const int XmsgMscCfgXscTcpServer::kN2HTracingFieldNumber;
const int XmsgMscCfgXscTcpServer::kH2NReConnFieldNumber;
const int XmsgMscCfgXscTcpServer::kH2NTransTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgMscCfgXscTcpServer::XmsgMscCfgXscTcpServer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgMscCfgXscTcpServer)
}
XmsgMscCfgXscTcpServer::XmsgMscCfgXscTcpServer(const XmsgMscCfgXscTcpServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  ::memcpy(&worker_, &from.worker_,
    static_cast<size_t>(reinterpret_cast<char*>(&h2ntranstimeout_) -
    reinterpret_cast<char*>(&worker_)) + sizeof(h2ntranstimeout_));
  // @@protoc_insertion_point(copy_constructor:XmsgMscCfgXscTcpServer)
}

void XmsgMscCfgXscTcpServer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_XmsgMscCfgXscTcpServer_cfg_2dx_2dmsg_2dmsc_2eproto.base);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&worker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h2ntranstimeout_) -
      reinterpret_cast<char*>(&worker_)) + sizeof(h2ntranstimeout_));
}

XmsgMscCfgXscTcpServer::~XmsgMscCfgXscTcpServer() {
  // @@protoc_insertion_point(destructor:XmsgMscCfgXscTcpServer)
  SharedDtor();
}

void XmsgMscCfgXscTcpServer::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgMscCfgXscTcpServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XmsgMscCfgXscTcpServer& XmsgMscCfgXscTcpServer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_XmsgMscCfgXscTcpServer_cfg_2dx_2dmsg_2dmsc_2eproto.base);
  return *internal_default_instance();
}


void XmsgMscCfgXscTcpServer::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgMscCfgXscTcpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&worker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h2ntranstimeout_) -
      reinterpret_cast<char*>(&worker_)) + sizeof(h2ntranstimeout_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* XmsgMscCfgXscTcpServer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<XmsgMscCfgXscTcpServer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string addr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("XmsgMscCfgXscTcpServer.addr");
        object = msg->mutable_addr();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 worker = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_worker(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 peerLimit = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_peerlimit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 peerMtu = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_peermtu(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 peerRcvBuf = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_peerrcvbuf(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 peerSndBuf = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_peersndbuf(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 lazyClose = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_lazyclose(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool tracing = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_tracing(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 heartbeat = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_heartbeat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 n2hZombie = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_n2hzombie(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 n2hTransTimeout = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_n2htranstimeout(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool n2hTracing = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_n2htracing(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 h2nReConn = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_h2nreconn(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 h2nTransTimeout = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_h2ntranstimeout(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool XmsgMscCfgXscTcpServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgMscCfgXscTcpServer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgMscCfgXscTcpServer.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 worker = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerLimit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peerlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerMtu = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peermtu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerRcvBuf = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peerrcvbuf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerSndBuf = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peersndbuf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lazyClose = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lazyclose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool tracing = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tracing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 heartbeat = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heartbeat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 n2hZombie = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n2hzombie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 n2hTransTimeout = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n2htranstimeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool n2hTracing = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &n2htracing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 h2nReConn = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h2nreconn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 h2nTransTimeout = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h2ntranstimeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgMscCfgXscTcpServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgMscCfgXscTcpServer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void XmsgMscCfgXscTcpServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgMscCfgXscTcpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgXscTcpServer.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  // uint32 worker = 2;
  if (this->worker() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->worker(), output);
  }

  // uint32 peerLimit = 3;
  if (this->peerlimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->peerlimit(), output);
  }

  // uint32 peerMtu = 4;
  if (this->peermtu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->peermtu(), output);
  }

  // uint32 peerRcvBuf = 5;
  if (this->peerrcvbuf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->peerrcvbuf(), output);
  }

  // uint32 peerSndBuf = 6;
  if (this->peersndbuf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->peersndbuf(), output);
  }

  // uint32 lazyClose = 7;
  if (this->lazyclose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lazyclose(), output);
  }

  // bool tracing = 8;
  if (this->tracing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->tracing(), output);
  }

  // uint32 heartbeat = 9;
  if (this->heartbeat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->heartbeat(), output);
  }

  // uint32 n2hZombie = 10;
  if (this->n2hzombie() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->n2hzombie(), output);
  }

  // uint32 n2hTransTimeout = 11;
  if (this->n2htranstimeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->n2htranstimeout(), output);
  }

  // bool n2hTracing = 12;
  if (this->n2htracing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->n2htracing(), output);
  }

  // uint32 h2nReConn = 13;
  if (this->h2nreconn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->h2nreconn(), output);
  }

  // uint32 h2nTransTimeout = 14;
  if (this->h2ntranstimeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->h2ntranstimeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgMscCfgXscTcpServer)
}

::google::protobuf::uint8* XmsgMscCfgXscTcpServer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XmsgMscCfgXscTcpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgXscTcpServer.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // uint32 worker = 2;
  if (this->worker() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->worker(), target);
  }

  // uint32 peerLimit = 3;
  if (this->peerlimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->peerlimit(), target);
  }

  // uint32 peerMtu = 4;
  if (this->peermtu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->peermtu(), target);
  }

  // uint32 peerRcvBuf = 5;
  if (this->peerrcvbuf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->peerrcvbuf(), target);
  }

  // uint32 peerSndBuf = 6;
  if (this->peersndbuf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->peersndbuf(), target);
  }

  // uint32 lazyClose = 7;
  if (this->lazyclose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lazyclose(), target);
  }

  // bool tracing = 8;
  if (this->tracing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->tracing(), target);
  }

  // uint32 heartbeat = 9;
  if (this->heartbeat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->heartbeat(), target);
  }

  // uint32 n2hZombie = 10;
  if (this->n2hzombie() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->n2hzombie(), target);
  }

  // uint32 n2hTransTimeout = 11;
  if (this->n2htranstimeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->n2htranstimeout(), target);
  }

  // bool n2hTracing = 12;
  if (this->n2htracing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->n2htracing(), target);
  }

  // uint32 h2nReConn = 13;
  if (this->h2nreconn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->h2nreconn(), target);
  }

  // uint32 h2nTransTimeout = 14;
  if (this->h2ntranstimeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->h2ntranstimeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgMscCfgXscTcpServer)
  return target;
}

size_t XmsgMscCfgXscTcpServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgMscCfgXscTcpServer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  // uint32 worker = 2;
  if (this->worker() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worker());
  }

  // uint32 peerLimit = 3;
  if (this->peerlimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peerlimit());
  }

  // uint32 peerMtu = 4;
  if (this->peermtu() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peermtu());
  }

  // uint32 peerRcvBuf = 5;
  if (this->peerrcvbuf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peerrcvbuf());
  }

  // uint32 peerSndBuf = 6;
  if (this->peersndbuf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peersndbuf());
  }

  // uint32 lazyClose = 7;
  if (this->lazyclose() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lazyclose());
  }

  // uint32 heartbeat = 9;
  if (this->heartbeat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heartbeat());
  }

  // uint32 n2hZombie = 10;
  if (this->n2hzombie() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n2hzombie());
  }

  // bool tracing = 8;
  if (this->tracing() != 0) {
    total_size += 1 + 1;
  }

  // bool n2hTracing = 12;
  if (this->n2htracing() != 0) {
    total_size += 1 + 1;
  }

  // uint32 n2hTransTimeout = 11;
  if (this->n2htranstimeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n2htranstimeout());
  }

  // uint32 h2nReConn = 13;
  if (this->h2nreconn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->h2nreconn());
  }

  // uint32 h2nTransTimeout = 14;
  if (this->h2ntranstimeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->h2ntranstimeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XmsgMscCfgXscTcpServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgMscCfgXscTcpServer)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgMscCfgXscTcpServer* source =
      ::google::protobuf::DynamicCastToGenerated<XmsgMscCfgXscTcpServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgMscCfgXscTcpServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgMscCfgXscTcpServer)
    MergeFrom(*source);
  }
}

void XmsgMscCfgXscTcpServer::MergeFrom(const XmsgMscCfgXscTcpServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgMscCfgXscTcpServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  if (from.worker() != 0) {
    set_worker(from.worker());
  }
  if (from.peerlimit() != 0) {
    set_peerlimit(from.peerlimit());
  }
  if (from.peermtu() != 0) {
    set_peermtu(from.peermtu());
  }
  if (from.peerrcvbuf() != 0) {
    set_peerrcvbuf(from.peerrcvbuf());
  }
  if (from.peersndbuf() != 0) {
    set_peersndbuf(from.peersndbuf());
  }
  if (from.lazyclose() != 0) {
    set_lazyclose(from.lazyclose());
  }
  if (from.heartbeat() != 0) {
    set_heartbeat(from.heartbeat());
  }
  if (from.n2hzombie() != 0) {
    set_n2hzombie(from.n2hzombie());
  }
  if (from.tracing() != 0) {
    set_tracing(from.tracing());
  }
  if (from.n2htracing() != 0) {
    set_n2htracing(from.n2htracing());
  }
  if (from.n2htranstimeout() != 0) {
    set_n2htranstimeout(from.n2htranstimeout());
  }
  if (from.h2nreconn() != 0) {
    set_h2nreconn(from.h2nreconn());
  }
  if (from.h2ntranstimeout() != 0) {
    set_h2ntranstimeout(from.h2ntranstimeout());
  }
}

void XmsgMscCfgXscTcpServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgMscCfgXscTcpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgMscCfgXscTcpServer::CopyFrom(const XmsgMscCfgXscTcpServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgMscCfgXscTcpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgMscCfgXscTcpServer::IsInitialized() const {
  return true;
}

void XmsgMscCfgXscTcpServer::Swap(XmsgMscCfgXscTcpServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgMscCfgXscTcpServer::InternalSwap(XmsgMscCfgXscTcpServer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  addr_.Swap(&other->addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(worker_, other->worker_);
  swap(peerlimit_, other->peerlimit_);
  swap(peermtu_, other->peermtu_);
  swap(peerrcvbuf_, other->peerrcvbuf_);
  swap(peersndbuf_, other->peersndbuf_);
  swap(lazyclose_, other->lazyclose_);
  swap(heartbeat_, other->heartbeat_);
  swap(n2hzombie_, other->n2hzombie_);
  swap(tracing_, other->tracing_);
  swap(n2htracing_, other->n2htracing_);
  swap(n2htranstimeout_, other->n2htranstimeout_);
  swap(h2nreconn_, other->h2nreconn_);
  swap(h2ntranstimeout_, other->h2ntranstimeout_);
}

::google::protobuf::Metadata XmsgMscCfgXscTcpServer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cfg_2dx_2dmsg_2dmsc_2eproto);
  return ::file_level_metadata_cfg_2dx_2dmsg_2dmsc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void XmsgMscCfgXmsgNe::InitAsDefaultInstance() {
}
class XmsgMscCfgXmsgNe::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgMscCfgXmsgNe::kNegFieldNumber;
const int XmsgMscCfgXmsgNe::kCgtFieldNumber;
const int XmsgMscCfgXmsgNe::kPwdFieldNumber;
const int XmsgMscCfgXmsgNe::kAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgMscCfgXmsgNe::XmsgMscCfgXmsgNe()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgMscCfgXmsgNe)
}
XmsgMscCfgXmsgNe::XmsgMscCfgXmsgNe(const XmsgMscCfgXmsgNe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.neg().size() > 0) {
    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cgt().size() > 0) {
    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pwd().size() > 0) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgMscCfgXmsgNe)
}

void XmsgMscCfgXmsgNe::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_XmsgMscCfgXmsgNe_cfg_2dx_2dmsg_2dmsc_2eproto.base);
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

XmsgMscCfgXmsgNe::~XmsgMscCfgXmsgNe() {
  // @@protoc_insertion_point(destructor:XmsgMscCfgXmsgNe)
  SharedDtor();
}

void XmsgMscCfgXmsgNe::SharedDtor() {
  neg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgMscCfgXmsgNe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XmsgMscCfgXmsgNe& XmsgMscCfgXmsgNe::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_XmsgMscCfgXmsgNe_cfg_2dx_2dmsg_2dmsc_2eproto.base);
  return *internal_default_instance();
}


void XmsgMscCfgXmsgNe::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgMscCfgXmsgNe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* XmsgMscCfgXmsgNe::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<XmsgMscCfgXmsgNe*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string neg = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("XmsgMscCfgXmsgNe.neg");
        object = msg->mutable_neg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string cgt = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("XmsgMscCfgXmsgNe.cgt");
        object = msg->mutable_cgt();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string pwd = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("XmsgMscCfgXmsgNe.pwd");
        object = msg->mutable_pwd();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string addr = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("XmsgMscCfgXmsgNe.addr");
        object = msg->mutable_addr();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool XmsgMscCfgXmsgNe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgMscCfgXmsgNe)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string neg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neg().data(), static_cast<int>(this->neg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgMscCfgXmsgNe.neg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cgt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cgt().data(), static_cast<int>(this->cgt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgMscCfgXmsgNe.cgt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pwd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pwd().data(), static_cast<int>(this->pwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgMscCfgXmsgNe.pwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string addr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgMscCfgXmsgNe.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgMscCfgXmsgNe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgMscCfgXmsgNe)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void XmsgMscCfgXmsgNe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgMscCfgXmsgNe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgXmsgNe.neg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->neg(), output);
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgXmsgNe.cgt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cgt(), output);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgXmsgNe.pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  // string addr = 4;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgXmsgNe.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->addr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgMscCfgXmsgNe)
}

::google::protobuf::uint8* XmsgMscCfgXmsgNe::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XmsgMscCfgXmsgNe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgXmsgNe.neg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->neg(), target);
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgXmsgNe.cgt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cgt(), target);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgXmsgNe.pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  // string addr = 4;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgXmsgNe.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->addr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgMscCfgXmsgNe)
  return target;
}

size_t XmsgMscCfgXmsgNe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgMscCfgXmsgNe)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->neg());
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cgt());
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pwd());
  }

  // string addr = 4;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XmsgMscCfgXmsgNe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgMscCfgXmsgNe)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgMscCfgXmsgNe* source =
      ::google::protobuf::DynamicCastToGenerated<XmsgMscCfgXmsgNe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgMscCfgXmsgNe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgMscCfgXmsgNe)
    MergeFrom(*source);
  }
}

void XmsgMscCfgXmsgNe::MergeFrom(const XmsgMscCfgXmsgNe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgMscCfgXmsgNe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.neg().size() > 0) {

    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  if (from.cgt().size() > 0) {

    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
}

void XmsgMscCfgXmsgNe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgMscCfgXmsgNe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgMscCfgXmsgNe::CopyFrom(const XmsgMscCfgXmsgNe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgMscCfgXmsgNe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgMscCfgXmsgNe::IsInitialized() const {
  return true;
}

void XmsgMscCfgXmsgNe::Swap(XmsgMscCfgXmsgNe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgMscCfgXmsgNe::InternalSwap(XmsgMscCfgXmsgNe* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  neg_.Swap(&other->neg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cgt_.Swap(&other->cgt_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pwd_.Swap(&other->pwd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  addr_.Swap(&other->addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata XmsgMscCfgXmsgNe::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cfg_2dx_2dmsg_2dmsc_2eproto);
  return ::file_level_metadata_cfg_2dx_2dmsg_2dmsc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void XmsgMscCfgXmsgMsc::InitAsDefaultInstance() {
}
class XmsgMscCfgXmsgMsc::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgMscCfgXmsgMsc::kCgtFieldNumber;
const int XmsgMscCfgXmsgMsc::kAddrFieldNumber;
const int XmsgMscCfgXmsgMsc::kPwdFieldNumber;
const int XmsgMscCfgXmsgMsc::kAlgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgMscCfgXmsgMsc::XmsgMscCfgXmsgMsc()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgMscCfgXmsgMsc)
}
XmsgMscCfgXmsgMsc::XmsgMscCfgXmsgMsc(const XmsgMscCfgXmsgMsc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cgt().size() > 0) {
    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pwd().size() > 0) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  alg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alg().size() > 0) {
    alg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alg_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgMscCfgXmsgMsc)
}

void XmsgMscCfgXmsgMsc::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_XmsgMscCfgXmsgMsc_cfg_2dx_2dmsg_2dmsc_2eproto.base);
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

XmsgMscCfgXmsgMsc::~XmsgMscCfgXmsgMsc() {
  // @@protoc_insertion_point(destructor:XmsgMscCfgXmsgMsc)
  SharedDtor();
}

void XmsgMscCfgXmsgMsc::SharedDtor() {
  cgt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgMscCfgXmsgMsc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XmsgMscCfgXmsgMsc& XmsgMscCfgXmsgMsc::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_XmsgMscCfgXmsgMsc_cfg_2dx_2dmsg_2dmsc_2eproto.base);
  return *internal_default_instance();
}


void XmsgMscCfgXmsgMsc::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgMscCfgXmsgMsc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* XmsgMscCfgXmsgMsc::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<XmsgMscCfgXmsgMsc*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string cgt = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("XmsgMscCfgXmsgMsc.cgt");
        object = msg->mutable_cgt();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string addr = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("XmsgMscCfgXmsgMsc.addr");
        object = msg->mutable_addr();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string pwd = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("XmsgMscCfgXmsgMsc.pwd");
        object = msg->mutable_pwd();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string alg = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("XmsgMscCfgXmsgMsc.alg");
        object = msg->mutable_alg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool XmsgMscCfgXmsgMsc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgMscCfgXmsgMsc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cgt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cgt().data(), static_cast<int>(this->cgt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgMscCfgXmsgMsc.cgt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string addr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgMscCfgXmsgMsc.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pwd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pwd().data(), static_cast<int>(this->pwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgMscCfgXmsgMsc.pwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string alg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alg().data(), static_cast<int>(this->alg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgMscCfgXmsgMsc.alg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgMscCfgXmsgMsc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgMscCfgXmsgMsc)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void XmsgMscCfgXmsgMsc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgMscCfgXmsgMsc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgXmsgMsc.cgt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cgt(), output);
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgXmsgMsc.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->addr(), output);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgXmsgMsc.pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  // string alg = 4;
  if (this->alg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alg().data(), static_cast<int>(this->alg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgXmsgMsc.alg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->alg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgMscCfgXmsgMsc)
}

::google::protobuf::uint8* XmsgMscCfgXmsgMsc::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XmsgMscCfgXmsgMsc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgXmsgMsc.cgt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cgt(), target);
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgXmsgMsc.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->addr(), target);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgXmsgMsc.pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  // string alg = 4;
  if (this->alg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alg().data(), static_cast<int>(this->alg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgMscCfgXmsgMsc.alg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->alg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgMscCfgXmsgMsc)
  return target;
}

size_t XmsgMscCfgXmsgMsc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgMscCfgXmsgMsc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cgt());
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pwd());
  }

  // string alg = 4;
  if (this->alg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XmsgMscCfgXmsgMsc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgMscCfgXmsgMsc)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgMscCfgXmsgMsc* source =
      ::google::protobuf::DynamicCastToGenerated<XmsgMscCfgXmsgMsc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgMscCfgXmsgMsc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgMscCfgXmsgMsc)
    MergeFrom(*source);
  }
}

void XmsgMscCfgXmsgMsc::MergeFrom(const XmsgMscCfgXmsgMsc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgMscCfgXmsgMsc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cgt().size() > 0) {

    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.alg().size() > 0) {

    alg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alg_);
  }
}

void XmsgMscCfgXmsgMsc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgMscCfgXmsgMsc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgMscCfgXmsgMsc::CopyFrom(const XmsgMscCfgXmsgMsc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgMscCfgXmsgMsc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgMscCfgXmsgMsc::IsInitialized() const {
  return true;
}

void XmsgMscCfgXmsgMsc::Swap(XmsgMscCfgXmsgMsc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgMscCfgXmsgMsc::InternalSwap(XmsgMscCfgXmsgMsc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cgt_.Swap(&other->cgt_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  addr_.Swap(&other->addr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pwd_.Swap(&other->pwd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  alg_.Swap(&other->alg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata XmsgMscCfgXmsgMsc::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cfg_2dx_2dmsg_2dmsc_2eproto);
  return ::file_level_metadata_cfg_2dx_2dmsg_2dmsc_2eproto[kIndexInFileMessages];
}


// ===================================================================

void XmsgMscCfgMisc::InitAsDefaultInstance() {
}
class XmsgMscCfgMisc::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgMscCfgMisc::kRunModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgMscCfgMisc::XmsgMscCfgMisc()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgMscCfgMisc)
}
XmsgMscCfgMisc::XmsgMscCfgMisc(const XmsgMscCfgMisc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  runmode_ = from.runmode_;
  // @@protoc_insertion_point(copy_constructor:XmsgMscCfgMisc)
}

void XmsgMscCfgMisc::SharedCtor() {
  runmode_ = 0u;
}

XmsgMscCfgMisc::~XmsgMscCfgMisc() {
  // @@protoc_insertion_point(destructor:XmsgMscCfgMisc)
  SharedDtor();
}

void XmsgMscCfgMisc::SharedDtor() {
}

void XmsgMscCfgMisc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const XmsgMscCfgMisc& XmsgMscCfgMisc::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_XmsgMscCfgMisc_cfg_2dx_2dmsg_2dmsc_2eproto.base);
  return *internal_default_instance();
}


void XmsgMscCfgMisc::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgMscCfgMisc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  runmode_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* XmsgMscCfgMisc::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<XmsgMscCfgMisc*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 runMode = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_runmode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool XmsgMscCfgMisc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgMscCfgMisc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 runMode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &runmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgMscCfgMisc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgMscCfgMisc)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void XmsgMscCfgMisc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgMscCfgMisc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 runMode = 1;
  if (this->runmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->runmode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgMscCfgMisc)
}

::google::protobuf::uint8* XmsgMscCfgMisc::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:XmsgMscCfgMisc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 runMode = 1;
  if (this->runmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->runmode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgMscCfgMisc)
  return target;
}

size_t XmsgMscCfgMisc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgMscCfgMisc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 runMode = 1;
  if (this->runmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->runmode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XmsgMscCfgMisc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgMscCfgMisc)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgMscCfgMisc* source =
      ::google::protobuf::DynamicCastToGenerated<XmsgMscCfgMisc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgMscCfgMisc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgMscCfgMisc)
    MergeFrom(*source);
  }
}

void XmsgMscCfgMisc::MergeFrom(const XmsgMscCfgMisc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgMscCfgMisc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.runmode() != 0) {
    set_runmode(from.runmode());
  }
}

void XmsgMscCfgMisc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgMscCfgMisc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgMscCfgMisc::CopyFrom(const XmsgMscCfgMisc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgMscCfgMisc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgMscCfgMisc::IsInitialized() const {
  return true;
}

void XmsgMscCfgMisc::Swap(XmsgMscCfgMisc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgMscCfgMisc::InternalSwap(XmsgMscCfgMisc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(runmode_, other->runmode_);
}

::google::protobuf::Metadata XmsgMscCfgMisc::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cfg_2dx_2dmsg_2dmsc_2eproto);
  return ::file_level_metadata_cfg_2dx_2dmsg_2dmsc_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::XmsgMscCfgPb_KafkaProdEntry_DoNotUse* Arena::CreateMaybeMessage< ::XmsgMscCfgPb_KafkaProdEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::XmsgMscCfgPb_KafkaProdEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::XmsgMscCfgPb* Arena::CreateMaybeMessage< ::XmsgMscCfgPb >(Arena* arena) {
  return Arena::CreateInternal< ::XmsgMscCfgPb >(arena);
}
template<> PROTOBUF_NOINLINE ::XmsgMscCfgLog* Arena::CreateMaybeMessage< ::XmsgMscCfgLog >(Arena* arena) {
  return Arena::CreateInternal< ::XmsgMscCfgLog >(arena);
}
template<> PROTOBUF_NOINLINE ::XmsgMscCfgXscTcpServer* Arena::CreateMaybeMessage< ::XmsgMscCfgXscTcpServer >(Arena* arena) {
  return Arena::CreateInternal< ::XmsgMscCfgXscTcpServer >(arena);
}
template<> PROTOBUF_NOINLINE ::XmsgMscCfgXmsgNe* Arena::CreateMaybeMessage< ::XmsgMscCfgXmsgNe >(Arena* arena) {
  return Arena::CreateInternal< ::XmsgMscCfgXmsgNe >(arena);
}
template<> PROTOBUF_NOINLINE ::XmsgMscCfgXmsgMsc* Arena::CreateMaybeMessage< ::XmsgMscCfgXmsgMsc >(Arena* arena) {
  return Arena::CreateInternal< ::XmsgMscCfgXmsgMsc >(arena);
}
template<> PROTOBUF_NOINLINE ::XmsgMscCfgMisc* Arena::CreateMaybeMessage< ::XmsgMscCfgMisc >(Arena* arena) {
  return Arena::CreateInternal< ::XmsgMscCfgMisc >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
